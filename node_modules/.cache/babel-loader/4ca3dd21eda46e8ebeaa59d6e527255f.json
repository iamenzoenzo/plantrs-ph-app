{"ast":null,"code":"var _jsxFileName = \"/Volumes/External/MasterGithub/plantrs-ph-app/src/components/plant/CommentForm.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles'; // MUIs\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField'; // Redux\n\nimport { connect } from 'react-redux';\nimport { submitComment } from '../../redux/actions/dataActions';\n\nconst styles = theme => ({ ...theme.spreadThis\n});\n\nclass CommentForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      body: '',\n      errors: {}\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.props.submitComment(this.props.plantId, {\n        body: this.state.body\n      });\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.UI.errors) {\n      this.setState({\n        errors: nextProps.UI.errors\n      });\n    }\n\n    if (!nextProps.UI.errors && !nextProps.UI.loading) {\n      this.setState({\n        body: ''\n      });\n    }\n  }\n\n  render() {\n    const {\n      classes,\n      authenticated\n    } = this.props;\n    const errors = this.state.errors;\n    const commentFormMarkup = authenticated ? /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 12,\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      name: \"body\",\n      type: \"text\",\n      label: \"Comment on plant\",\n      error: errors.comment ? true : false,\n      helperText: errors.comment,\n      value: this.state.body,\n      onChange: this.handleChange,\n      className: classes.textField,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }, \"Submit\")), /*#__PURE__*/React.createElement(\"hr\", {\n      className: classes.visibleSeparator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    })) : null;\n    return commentFormMarkup;\n  }\n\n}\n\nCommentForm.propTypes = {\n  submitComment: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n  plantId: PropTypes.string.isRequired,\n  authenticated: PropTypes.bool.isRequired\n};\n\nconst mapStateToProps = state => ({\n  UI: state.UI,\n  authenticated: state.user.authenticated\n});\n\nexport default connect(mapStateToProps, {\n  submitComment\n})(withStyles(styles)(CommentForm));","map":{"version":3,"sources":["/Volumes/External/MasterGithub/plantrs-ph-app/src/components/plant/CommentForm.js"],"names":["React","Component","PropTypes","withStyles","Button","Grid","TextField","connect","submitComment","styles","theme","spreadThis","CommentForm","state","body","errors","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","plantId","componentWillReceiveProps","nextProps","UI","loading","render","classes","authenticated","commentFormMarkup","textAlign","comment","textField","button","visibleSeparator","propTypes","func","isRequired","object","string","bool","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\n// MUIs\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n// Redux\nimport { connect } from 'react-redux';\nimport { submitComment } from '../../redux/actions/dataActions';\n\n\nconst styles = (theme) => ({\n    ...theme.spreadThis,\n    \n})\n\nclass CommentForm extends Component {\n    state = {\n        body: '',\n        errors: {}\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(nextProps.UI.errors){\n            this.setState({errors: nextProps.UI.errors});\n        }\n        if(!nextProps.UI.errors && !nextProps.UI.loading){\n            this.setState({ body: '' });\n        }\n\n    }\n\n    handleChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.submitComment(this.props.plantId, { body: this.state.body });\n    }\n\n\n\n    render() {\n        const { classes, authenticated } = this.props;\n        const errors = this.state.errors;\n        \n        const commentFormMarkup = authenticated ? (\n            <Grid item sm={12} style={{ textAlign: 'center' }}>\n                <form onSubmit={this.handleSubmit}>\n                    <TextField\n                        name=\"body\"\n                        type=\"text\"\n                        label=\"Comment on plant\"\n                        error={errors.comment ? true : false }\n                        helperText={errors.comment}\n                        value={this.state.body}\n                        onChange={this.handleChange}\n                        className={classes.textField}\n                        fullWidth\n                    />\n                    <Button type=\"submit\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                    >Submit</Button>\n                </form>\n                <hr className={classes.visibleSeparator}/>\n            </Grid>\n        ) : null\n        return commentFormMarkup;\n    }\n}\n\nCommentForm.propTypes = {\n    submitComment: PropTypes.func.isRequired,\n    UI: PropTypes.object.isRequired,\n    classes: PropTypes.object.isRequired,\n    plantId: PropTypes.string.isRequired,\n    authenticated: PropTypes.bool.isRequired\n}\n\nconst mapStateToProps = state => ({\n    UI: state.UI,\n    authenticated: state.user.authenticated\n})\n\nexport default connect(mapStateToProps, { submitComment })(withStyles(styles)(CommentForm));\n"]},"metadata":{},"sourceType":"module"}