{"ast":null,"code":"import{SET_PLANTS,LOADING_DATA,LIKE_PLANT,UNLIKE_PLANT,DELETE_PLANT,SET_ERRORS,POST_PLANT,CLEAR_ERRORS,LOADING_UI,SET_PLANT,STOP_LOADING_UI,SUBMIT_COMMENT}from'../types';import axios from'axios';// Get all plants\nexport var getPlants=function getPlants(){return function(dispatch){dispatch({type:LOADING_DATA});axios.get('/plants').then(function(res){dispatch({type:SET_PLANTS,payload:res.data});}).catch(function(err){dispatch({type:SET_PLANTS,payload:[]});});};};export var getPlant=function getPlant(plantId){return function(dispatch){dispatch({type:LOADING_UI});axios.get(\"/plant/\".concat(plantId)).then(function(res){dispatch({type:SET_PLANT,payload:res.data});dispatch({type:STOP_LOADING_UI});}).catch(function(err){return console.log(err);});};};// Post a plant\nexport var postPlant=function postPlant(newPlant){return function(dispatch){dispatch({type:LOADING_UI});axios.post('/plant',newPlant).then(function(res){dispatch({type:POST_PLANT,payload:res.data});dispatch(clearErrors());}).catch(function(err){dispatch({type:SET_ERRORS,payload:err.response.data});});};};// Like a plant\nexport var likePlant=function likePlant(plantId){return function(dispatch){axios.get(\"/plant/\".concat(plantId,\"/like\")).then(function(res){dispatch({type:LIKE_PLANT,payload:res.data});}).catch(function(err){return console.log(err);});};};// Unlike a plant\nexport var unlikePlant=function unlikePlant(plantId){return function(dispatch){axios.get(\"/plant/\".concat(plantId,\"/unlike\")).then(function(res){dispatch({type:UNLIKE_PLANT,payload:res.data});}).catch(function(err){return console.log(err);});};};// Submit a comment\nexport var submitComment=function submitComment(plantId,commentData){return function(dispatch){axios.post(\"/plant/\".concat(plantId,\"/comment\"),commentData).then(function(res){dispatch({type:SUBMIT_COMMENT,payload:res.data});dispatch(clearErrors());}).catch(function(err){dispatch({type:SET_ERRORS,payload:err.response.data});});};};// Delete a plant\nexport var deletePlant=function deletePlant(plantId){return function(dispatch){axios.delete(\"/plant/\".concat(plantId)).then(function(){dispatch({type:DELETE_PLANT,paylod:plantId});}).catch(function(err){return console.log(err);});};};// Get user data and display plants\nexport var getUserData=function getUserData(userHandle){return function(dispatch){dispatch({type:LOADING_DATA});axios.get(\"/user/\".concat(userHandle)).then(function(res){dispatch({type:SET_PLANTS,payload:res.data.plants});}).catch(function(){dispatch({type:SET_PLANTS,payload:null});});};};export var clearErrors=function clearErrors(){return function(dispatch){dispatch({type:CLEAR_ERRORS});};};","map":{"version":3,"sources":["/Volumes/External/MasterGithub/plantrs-ph-app/src/redux/actions/dataActions.js"],"names":["SET_PLANTS","LOADING_DATA","LIKE_PLANT","UNLIKE_PLANT","DELETE_PLANT","SET_ERRORS","POST_PLANT","CLEAR_ERRORS","LOADING_UI","SET_PLANT","STOP_LOADING_UI","SUBMIT_COMMENT","axios","getPlants","dispatch","type","get","then","res","payload","data","catch","err","getPlant","plantId","console","log","postPlant","newPlant","post","clearErrors","response","likePlant","unlikePlant","submitComment","commentData","deletePlant","delete","paylod","getUserData","userHandle","plants"],"mappings":"AAAA,OACIA,UADJ,CAEIC,YAFJ,CAGIC,UAHJ,CAIIC,YAJJ,CAKIC,YALJ,CAMIC,UANJ,CAOIC,UAPJ,CAQIC,YARJ,CASIC,UATJ,CAUIC,SAVJ,CAWIC,eAXJ,CAYIC,cAZJ,KAaO,UAbP,CAcA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA;AACA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,SAAM,UAAAC,QAAQ,CAAI,CACvCA,QAAQ,CAAC,CAAEC,IAAI,CAAEd,YAAR,CAAD,CAAR,CACAW,KAAK,CAACI,GAAN,CAAU,SAAV,EACKC,IADL,CACU,SAAAC,GAAG,CAAI,CACTJ,QAAQ,CAAC,CACLC,IAAI,CAAEf,UADD,CAELmB,OAAO,CAAED,GAAG,CAACE,IAFR,CAAD,CAAR,CAIH,CANL,EAOKC,KAPL,CAOW,SAAAC,GAAG,CAAI,CACVR,QAAQ,CAAC,CACLC,IAAI,CAAEf,UADD,CAELmB,OAAO,CAAE,EAFJ,CAAD,CAAR,CAIH,CAZL,EAaH,CAfwB,EAAlB,CAiBP,MAAO,IAAMI,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,OAAD,QAAa,UAAAV,QAAQ,CAAI,CAC7CA,QAAQ,CAAC,CAAEC,IAAI,CAAEP,UAAR,CAAD,CAAR,CACAI,KAAK,CAACI,GAAN,kBAAoBQ,OAApB,GACKP,IADL,CACU,SAAAC,GAAG,CAAI,CACTJ,QAAQ,CAAC,CACLC,IAAI,CAAEN,SADD,CAELU,OAAO,CAAED,GAAG,CAACE,IAFR,CAAD,CAAR,CAIAN,QAAQ,CAAC,CAAEC,IAAI,CAAEL,eAAR,CAAD,CAAR,CACH,CAPL,EAQKW,KARL,CAQW,SAAAC,GAAG,QAAIG,CAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ,CAAJ,EARd,EASH,CAXuB,EAAjB,CAYP;AACA,MAAO,IAAMK,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,QAAD,QAAc,UAACd,QAAD,CAAc,CACjDA,QAAQ,CAAC,CAAEC,IAAI,CAAEP,UAAR,CAAD,CAAR,CACAI,KAAK,CACAiB,IADL,CACU,QADV,CACoBD,QADpB,EAEKX,IAFL,CAEU,SAACC,GAAD,CAAS,CACXJ,QAAQ,CAAC,CACLC,IAAI,CAAET,UADD,CAELa,OAAO,CAAED,GAAG,CAACE,IAFR,CAAD,CAAR,CAIAN,QAAQ,CAACgB,WAAW,EAAZ,CAAR,CACH,CARL,EASKT,KATL,CASW,SAAAC,GAAG,CAAI,CACVR,QAAQ,CAAC,CACLC,IAAI,CAAEV,UADD,CAELc,OAAO,CAAEG,GAAG,CAACS,QAAJ,CAAaX,IAFjB,CAAD,CAAR,CAIH,CAdL,EAeH,CAjBwB,EAAlB,CAmBP;AACA,MAAO,IAAMY,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACR,OAAD,QAAa,UAAAV,QAAQ,CAAI,CAC9CF,KAAK,CACAI,GADL,kBACmBQ,OADnB,WAEKP,IAFL,CAEU,SAAAC,GAAG,CAAI,CACTJ,QAAQ,CAAC,CACLC,IAAI,CAAEb,UADD,CAELiB,OAAO,CAAED,GAAG,CAACE,IAFR,CAAD,CAAR,CAIH,CAPL,EAQKC,KARL,CAQW,SAACC,GAAD,QAASG,CAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ,CAAT,EARX,EASH,CAVwB,EAAlB,CAWP;AACA,MAAO,IAAMW,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACT,OAAD,QAAa,UAAAV,QAAQ,CAAI,CAChDF,KAAK,CACAI,GADL,kBACmBQ,OADnB,aAEKP,IAFL,CAEU,SAAAC,GAAG,CAAI,CACTJ,QAAQ,CAAC,CACLC,IAAI,CAAEZ,YADD,CAELgB,OAAO,CAAED,GAAG,CAACE,IAFR,CAAD,CAAR,CAIH,CAPL,EAQKC,KARL,CAQW,SAACC,GAAD,QAASG,CAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ,CAAT,EARX,EASH,CAV0B,EAApB,CAWP;AACA,MAAO,IAAMY,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACV,OAAD,CAAUW,WAAV,QAA0B,UAACrB,QAAD,CAAc,CACjEF,KAAK,CAACiB,IAAN,kBAAqBL,OAArB,aAAwCW,WAAxC,EACKlB,IADL,CACU,SAAAC,GAAG,CAAI,CACTJ,QAAQ,CAAC,CACLC,IAAI,CAAEJ,cADD,CAELQ,OAAO,CAAED,GAAG,CAACE,IAFR,CAAD,CAAR,CAIAN,QAAQ,CAACgB,WAAW,EAAZ,CAAR,CACH,CAPL,EAQKT,KARL,CAQW,SAAAC,GAAG,CAAI,CACVR,QAAQ,CAAC,CACLC,IAAI,CAAEV,UADD,CAELc,OAAO,CAAEG,GAAG,CAACS,QAAJ,CAAaX,IAFjB,CAAD,CAAR,CAIH,CAbL,EAcH,CAf4B,EAAtB,CAgBP;AACA,MAAO,IAAMgB,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACZ,OAAD,QAAa,UAACV,QAAD,CAAc,CAClDF,KAAK,CAACyB,MAAN,kBAAuBb,OAAvB,GACKP,IADL,CACU,UAAM,CACRH,QAAQ,CAAC,CAAEC,IAAI,CAAEX,YAAR,CAAsBkC,MAAM,CAAEd,OAA9B,CAAD,CAAR,CACH,CAHL,EAIKH,KAJL,CAIW,SAACC,GAAD,QAASG,CAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ,CAAT,EAJX,EAKH,CAN0B,EAApB,CAQP;AACA,MAAO,IAAMiB,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,UAAD,QAAgB,UAAA1B,QAAQ,CAAI,CACnDA,QAAQ,CAAC,CAAEC,IAAI,CAAEd,YAAR,CAAD,CAAR,CACAW,KAAK,CAACI,GAAN,iBAAmBwB,UAAnB,GACKvB,IADL,CACU,SAAAC,GAAG,CAAI,CACTJ,QAAQ,CAAC,CACLC,IAAI,CAAEf,UADD,CAELmB,OAAO,CAAED,GAAG,CAACE,IAAJ,CAASqB,MAFb,CAAD,CAAR,CAIH,CANL,EAOKpB,KAPL,CAOW,UAAM,CACTP,QAAQ,CAAC,CACLC,IAAI,CAAEf,UADD,CAELmB,OAAO,CAAE,IAFJ,CAAD,CAAR,CAIH,CAZL,EAaH,CAf0B,EAApB,CAiBP,MAAO,IAAMW,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,SAAM,UAAChB,QAAD,CAAc,CAC3CA,QAAQ,CAAC,CAAEC,IAAI,CAAER,YAAR,CAAD,CAAR,CACD,CAFwB,EAApB","sourcesContent":["import { \n    SET_PLANTS, \n    LOADING_DATA, \n    LIKE_PLANT, \n    UNLIKE_PLANT,\n    DELETE_PLANT, \n    SET_ERRORS,\n    POST_PLANT,\n    CLEAR_ERRORS,\n    LOADING_UI,\n    SET_PLANT,\n    STOP_LOADING_UI,\n    SUBMIT_COMMENT\n} from '../types';\nimport axios from 'axios';\n\n// Get all plants\nexport const getPlants = () => dispatch => {\n    dispatch({ type: LOADING_DATA });\n    axios.get('/plants')\n        .then(res => {\n            dispatch({\n                type: SET_PLANTS,\n                payload: res.data\n            })\n        })\n        .catch(err => {\n            dispatch({\n                type: SET_PLANTS,\n                payload: []\n            })\n        })\n};\n\nexport const getPlant = (plantId) => dispatch => {\n    dispatch({ type: LOADING_UI });\n    axios.get(`/plant/${plantId}`)\n        .then(res => {\n            dispatch({\n                type: SET_PLANT,\n                payload: res.data\n            });\n            dispatch({ type: STOP_LOADING_UI })\n        })\n        .catch(err => console.log(err));\n}\n// Post a plant\nexport const postPlant = (newPlant) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios\n        .post('/plant', newPlant)\n        .then((res) => {\n            dispatch({\n                type: POST_PLANT,\n                payload: res.data\n            });\n            dispatch(clearErrors());\n        })\n        .catch(err => {\n            dispatch({\n                type: SET_ERRORS,\n                payload: err.response.data\n            })\n        })\n}\n\n// Like a plant\nexport const likePlant = (plantId) => dispatch => {\n    axios\n        .get(`/plant/${plantId}/like`)\n        .then(res => {\n            dispatch({\n                type: LIKE_PLANT,\n                payload: res.data\n            })\n        })\n        .catch((err) => console.log(err));\n};\n// Unlike a plant\nexport const unlikePlant = (plantId) => dispatch => {\n    axios\n        .get(`/plant/${plantId}/unlike`)\n        .then(res => {\n            dispatch({\n                type: UNLIKE_PLANT,\n                payload: res.data\n            })\n        })\n        .catch((err) => console.log(err));\n};\n// Submit a comment\nexport const submitComment = (plantId, commentData) => (dispatch) => {\n    axios.post(`/plant/${plantId}/comment`, commentData)\n        .then(res => {\n            dispatch({\n                type: SUBMIT_COMMENT,\n                payload: res.data\n            });\n            dispatch(clearErrors());\n        })\n        .catch(err => {\n            dispatch({\n                type: SET_ERRORS,\n                payload: err.response.data\n            })\n        })\n}\n// Delete a plant\nexport const deletePlant = (plantId) => (dispatch) => {\n    axios.delete(`/plant/${plantId}`)\n        .then(() => {\n            dispatch({ type: DELETE_PLANT, paylod: plantId })\n        })\n        .catch((err) => console.log(err));\n}\n\n// Get user data and display plants\nexport const getUserData = (userHandle) => dispatch => {\n    dispatch({ type: LOADING_DATA });\n    axios.get(`/user/${userHandle}`)\n        .then(res => {\n            dispatch({\n                type: SET_PLANTS,\n                payload: res.data.plants\n            });\n        })\n        .catch(() => {\n            dispatch({\n                type: SET_PLANTS,\n                payload: null\n            });\n        });\n}\n\nexport const clearErrors = () => (dispatch) => {\n    dispatch({ type: CLEAR_ERRORS });\n  };"]},"metadata":{},"sourceType":"module"}