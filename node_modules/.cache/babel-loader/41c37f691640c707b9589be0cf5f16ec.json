{"ast":null,"code":"import { SET_PLANTS, LIKE_PLANT, UNLIKE_PLANT, LOADING_DATA } from '../types';\nconst initialState = {\n  plants: [],\n  plant: {},\n  loading: false\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case LOADING_DATA:\n      return { ...state,\n        loading: true\n      };\n\n    case SET_PLANTS:\n      return { ...state,\n        plants: action.payload,\n        loading: false\n      };\n\n    case LIKE_PLANT:\n    case UNLIKE_PLANT:\n      let index = state.plants.findIndex(plant => plant.plantId === action.payload.plantId);\n      state.plants[index] = action.payload;\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Volumes/extra/is295/plantrs-ph-app/src/redux/reducers/dataReducer.js"],"names":["SET_PLANTS","LIKE_PLANT","UNLIKE_PLANT","LOADING_DATA","initialState","plants","plant","loading","state","action","type","payload","index","findIndex","plantId"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,UAArB,EAAiCC,YAAjC,EAA+CC,YAA/C,QAAmE,UAAnE;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,OAAO,EAAE;AAHQ,CAArB;AAMA,eAAe,UAASC,KAAK,GAAGJ,YAAjB,EAA+BK,MAA/B,EAAsC;AACjD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,YAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHD,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKP,UAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHH,QAAAA,MAAM,EAAEI,MAAM,CAACE,OAFZ;AAGHJ,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAKJ,SAAKN,UAAL;AACA,SAAKC,YAAL;AACI,UAAIU,KAAK,GAAGJ,KAAK,CAACH,MAAN,CAAaQ,SAAb,CAAwBP,KAAD,IAAWA,KAAK,CAACQ,OAAN,KAAkBL,MAAM,CAACE,OAAP,CAAeG,OAAnE,CAAZ;AACAN,MAAAA,KAAK,CAACH,MAAN,CAAaO,KAAb,IAAsBH,MAAM,CAACE,OAA7B;AACA,aAAO,EACH,GAAGH;AADA,OAAP;;AAGJ;AACI,aAAOA,KAAP;AApBR;AAsBH","sourcesContent":["import { SET_PLANTS, LIKE_PLANT, UNLIKE_PLANT, LOADING_DATA } from '../types';\n\nconst initialState = {\n    plants: [],\n    plant: {},\n    loading: false\n};\n\nexport default function(state = initialState, action){\n    switch(action.type){\n        case LOADING_DATA:\n            return {\n                ...state,\n                loading: true\n            };\n        case SET_PLANTS:\n            return {\n                ...state,\n                plants: action.payload,\n                loading: false\n            };\n        case LIKE_PLANT:\n        case UNLIKE_PLANT:\n            let index = state.plants.findIndex((plant) => plant.plantId === action.payload.plantId);\n            state.plants[index] = action.payload;\n            return {\n                ...state\n            };\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}