{"ast":null,"code":"import { SET_PLANTS, LOADING_DATA, LIKE_PLANT, UNLIKE_PLANT, DELETE_PLANT, SET_ERRORS, POST_PLANT, CLEAR_ERRORS, LOADING_UI, SET_PLANT, STOP_LOADING_UI, SUBMIT_COMMENT } from '../types';\nimport axios from 'axios'; // Get all plants\n\nexport const getPlants = () => dispatch => {\n  dispatch({\n    type: LOADING_DATA\n  });\n  axios.get('/plants').then(res => {\n    dispatch({\n      type: SET_PLANTS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: SET_PLANTS,\n      payload: []\n    });\n  });\n};\nexport const getPlant = plantId => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.get(`/plant/${plantId}`).then(res => {\n    dispatch({\n      type: SET_PLANT,\n      payload: res.data\n    });\n    dispatch({\n      type: STOP_LOADING_UI\n    });\n  }).catch(err => console.log(err));\n}; // Post a plant\n\nexport const postPlant = newPlant => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/plant', newPlant).then(res => {\n    dispatch({\n      type: POST_PLANT,\n      payload: res.data\n    });\n    dispatch(clearErrors());\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Like a plant\n\nexport const likePlant = plantId => dispatch => {\n  axios.get(`/plant/${plantId}/like`).then(res => {\n    dispatch({\n      type: LIKE_PLANT,\n      payload: res.data\n    });\n  }).catch(err => console.log(err));\n}; // Unlike a plant\n\nexport const unlikePlant = plantId => dispatch => {\n  axios.get(`/plant/${plantId}/unlike`).then(res => {\n    dispatch({\n      type: UNLIKE_PLANT,\n      payload: res.data\n    });\n  }).catch(err => console.log(err));\n}; // Submit a comment\n\nexport const submitComment = (plantId, commentData) => dispatch => {\n  axios.post(`/plant/${plantId}/comment`, commentData).then(res => {\n    dispatch({\n      type: SUBMIT_COMMENT,\n      payload: res.data\n    });\n    dispatch(clearErrors());\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Delete a plant\n\nexport const deletePlant = plantId => dispatch => {\n  axios.delete(`/plant/${plantId}`).then(() => {\n    dispatch({\n      type: DELETE_PLANT,\n      paylod: plantId\n    });\n  }).catch(err => console.log(err));\n}; // Get user data and display plants\n\nexport const getUserData = userHandle => dispatch => {\n  dispatch({\n    type: LOADING_DATA\n  });\n  axios.get(`/user/${userHandle}`).then(res => {\n    dispatch({\n      type: SET_PLANTS,\n      payload: res.data.plants\n    });\n  }).catch(() => {\n    dispatch({\n      type: SET_PLANTS,\n      payload: null\n    });\n  });\n};\nexport const clearErrors = () => dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["/Volumes/External/MasterGithub/plantrs-ph-app/src/redux/actions/dataActions.js"],"names":["SET_PLANTS","LOADING_DATA","LIKE_PLANT","UNLIKE_PLANT","DELETE_PLANT","SET_ERRORS","POST_PLANT","CLEAR_ERRORS","LOADING_UI","SET_PLANT","STOP_LOADING_UI","SUBMIT_COMMENT","axios","getPlants","dispatch","type","get","then","res","payload","data","catch","err","getPlant","plantId","console","log","postPlant","newPlant","post","clearErrors","response","likePlant","unlikePlant","submitComment","commentData","deletePlant","delete","paylod","getUserData","userHandle","plants"],"mappings":"AAAA,SACIA,UADJ,EAEIC,YAFJ,EAGIC,UAHJ,EAIIC,YAJJ,EAKIC,YALJ,EAMIC,UANJ,EAOIC,UAPJ,EAQIC,YARJ,EASIC,UATJ,EAUIC,SAVJ,EAWIC,eAXJ,EAYIC,cAZJ,QAaO,UAbP;AAcA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,MAAMC,QAAQ,IAAI;AACvCA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEd;AAAR,GAAD,CAAR;AACAW,EAAAA,KAAK,CAACI,GAAN,CAAU,SAAV,EACKC,IADL,CACUC,GAAG,IAAI;AACTJ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEf,UADD;AAELmB,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFR,KAAD,CAAR;AAIH,GANL,EAOKC,KAPL,CAOWC,GAAG,IAAI;AACVR,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEf,UADD;AAELmB,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GAZL;AAaH,CAfM;AAiBP,OAAO,MAAMI,QAAQ,GAAIC,OAAD,IAAaV,QAAQ,IAAI;AAC7CA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEP;AAAR,GAAD,CAAR;AACAI,EAAAA,KAAK,CAACI,GAAN,CAAW,UAASQ,OAAQ,EAA5B,EACKP,IADL,CACUC,GAAG,IAAI;AACTJ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEN,SADD;AAELU,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFR,KAAD,CAAR;AAIAN,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL;AAAR,KAAD,CAAR;AACH,GAPL,EAQKW,KARL,CAQWC,GAAG,IAAIG,OAAO,CAACC,GAAR,CAAYJ,GAAZ,CARlB;AASH,CAXM,C,CAYP;;AACA,OAAO,MAAMK,SAAS,GAAIC,QAAD,IAAed,QAAD,IAAc;AACjDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEP;AAAR,GAAD,CAAR;AACAI,EAAAA,KAAK,CACAiB,IADL,CACU,QADV,EACoBD,QADpB,EAEKX,IAFL,CAEWC,GAAD,IAAS;AACXJ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAET,UADD;AAELa,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFR,KAAD,CAAR;AAIAN,IAAAA,QAAQ,CAACgB,WAAW,EAAZ,CAAR;AACH,GARL,EASKT,KATL,CASWC,GAAG,IAAI;AACVR,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEV,UADD;AAELc,MAAAA,OAAO,EAAEG,GAAG,CAACS,QAAJ,CAAaX;AAFjB,KAAD,CAAR;AAIH,GAdL;AAeH,CAjBM,C,CAmBP;;AACA,OAAO,MAAMY,SAAS,GAAIR,OAAD,IAAaV,QAAQ,IAAI;AAC9CF,EAAAA,KAAK,CACAI,GADL,CACU,UAASQ,OAAQ,OAD3B,EAEKP,IAFL,CAEUC,GAAG,IAAI;AACTJ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEb,UADD;AAELiB,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFR,KAAD,CAAR;AAIH,GAPL,EAQKC,KARL,CAQYC,GAAD,IAASG,OAAO,CAACC,GAAR,CAAYJ,GAAZ,CARpB;AASH,CAVM,C,CAWP;;AACA,OAAO,MAAMW,WAAW,GAAIT,OAAD,IAAaV,QAAQ,IAAI;AAChDF,EAAAA,KAAK,CACAI,GADL,CACU,UAASQ,OAAQ,SAD3B,EAEKP,IAFL,CAEUC,GAAG,IAAI;AACTJ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEZ,YADD;AAELgB,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFR,KAAD,CAAR;AAIH,GAPL,EAQKC,KARL,CAQYC,GAAD,IAASG,OAAO,CAACC,GAAR,CAAYJ,GAAZ,CARpB;AASH,CAVM,C,CAWP;;AACA,OAAO,MAAMY,aAAa,GAAG,CAACV,OAAD,EAAUW,WAAV,KAA2BrB,QAAD,IAAc;AACjEF,EAAAA,KAAK,CAACiB,IAAN,CAAY,UAASL,OAAQ,UAA7B,EAAwCW,WAAxC,EACKlB,IADL,CACUC,GAAG,IAAI;AACTJ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEJ,cADD;AAELQ,MAAAA,OAAO,EAAED,GAAG,CAACE;AAFR,KAAD,CAAR;AAIAN,IAAAA,QAAQ,CAACgB,WAAW,EAAZ,CAAR;AACH,GAPL,EAQKT,KARL,CAQWC,GAAG,IAAI;AACVR,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEV,UADD;AAELc,MAAAA,OAAO,EAAEG,GAAG,CAACS,QAAJ,CAAaX;AAFjB,KAAD,CAAR;AAIH,GAbL;AAcH,CAfM,C,CAgBP;;AACA,OAAO,MAAMgB,WAAW,GAAIZ,OAAD,IAAcV,QAAD,IAAc;AAClDF,EAAAA,KAAK,CAACyB,MAAN,CAAc,UAASb,OAAQ,EAA/B,EACKP,IADL,CACU,MAAM;AACRH,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEX,YAAR;AAAsBkC,MAAAA,MAAM,EAAEd;AAA9B,KAAD,CAAR;AACH,GAHL,EAIKH,KAJL,CAIYC,GAAD,IAASG,OAAO,CAACC,GAAR,CAAYJ,GAAZ,CAJpB;AAKH,CANM,C,CAQP;;AACA,OAAO,MAAMiB,WAAW,GAAIC,UAAD,IAAgB1B,QAAQ,IAAI;AACnDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEd;AAAR,GAAD,CAAR;AACAW,EAAAA,KAAK,CAACI,GAAN,CAAW,SAAQwB,UAAW,EAA9B,EACKvB,IADL,CACUC,GAAG,IAAI;AACTJ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEf,UADD;AAELmB,MAAAA,OAAO,EAAED,GAAG,CAACE,IAAJ,CAASqB;AAFb,KAAD,CAAR;AAIH,GANL,EAOKpB,KAPL,CAOW,MAAM;AACTP,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEf,UADD;AAELmB,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GAZL;AAaH,CAfM;AAiBP,OAAO,MAAMW,WAAW,GAAG,MAAOhB,QAAD,IAAc;AAC3CA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAER;AAAR,GAAD,CAAR;AACD,CAFI","sourcesContent":["import { \n    SET_PLANTS, \n    LOADING_DATA, \n    LIKE_PLANT, \n    UNLIKE_PLANT,\n    DELETE_PLANT, \n    SET_ERRORS,\n    POST_PLANT,\n    CLEAR_ERRORS,\n    LOADING_UI,\n    SET_PLANT,\n    STOP_LOADING_UI,\n    SUBMIT_COMMENT\n} from '../types';\nimport axios from 'axios';\n\n// Get all plants\nexport const getPlants = () => dispatch => {\n    dispatch({ type: LOADING_DATA });\n    axios.get('/plants')\n        .then(res => {\n            dispatch({\n                type: SET_PLANTS,\n                payload: res.data\n            })\n        })\n        .catch(err => {\n            dispatch({\n                type: SET_PLANTS,\n                payload: []\n            })\n        })\n};\n\nexport const getPlant = (plantId) => dispatch => {\n    dispatch({ type: LOADING_UI });\n    axios.get(`/plant/${plantId}`)\n        .then(res => {\n            dispatch({\n                type: SET_PLANT,\n                payload: res.data\n            });\n            dispatch({ type: STOP_LOADING_UI })\n        })\n        .catch(err => console.log(err));\n}\n// Post a plant\nexport const postPlant = (newPlant) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios\n        .post('/plant', newPlant)\n        .then((res) => {\n            dispatch({\n                type: POST_PLANT,\n                payload: res.data\n            });\n            dispatch(clearErrors());\n        })\n        .catch(err => {\n            dispatch({\n                type: SET_ERRORS,\n                payload: err.response.data\n            })\n        })\n}\n\n// Like a plant\nexport const likePlant = (plantId) => dispatch => {\n    axios\n        .get(`/plant/${plantId}/like`)\n        .then(res => {\n            dispatch({\n                type: LIKE_PLANT,\n                payload: res.data\n            })\n        })\n        .catch((err) => console.log(err));\n};\n// Unlike a plant\nexport const unlikePlant = (plantId) => dispatch => {\n    axios\n        .get(`/plant/${plantId}/unlike`)\n        .then(res => {\n            dispatch({\n                type: UNLIKE_PLANT,\n                payload: res.data\n            })\n        })\n        .catch((err) => console.log(err));\n};\n// Submit a comment\nexport const submitComment = (plantId, commentData) => (dispatch) => {\n    axios.post(`/plant/${plantId}/comment`, commentData)\n        .then(res => {\n            dispatch({\n                type: SUBMIT_COMMENT,\n                payload: res.data\n            });\n            dispatch(clearErrors());\n        })\n        .catch(err => {\n            dispatch({\n                type: SET_ERRORS,\n                payload: err.response.data\n            })\n        })\n}\n// Delete a plant\nexport const deletePlant = (plantId) => (dispatch) => {\n    axios.delete(`/plant/${plantId}`)\n        .then(() => {\n            dispatch({ type: DELETE_PLANT, paylod: plantId })\n        })\n        .catch((err) => console.log(err));\n}\n\n// Get user data and display plants\nexport const getUserData = (userHandle) => dispatch => {\n    dispatch({ type: LOADING_DATA });\n    axios.get(`/user/${userHandle}`)\n        .then(res => {\n            dispatch({\n                type: SET_PLANTS,\n                payload: res.data.plants\n            });\n        })\n        .catch(() => {\n            dispatch({\n                type: SET_PLANTS,\n                payload: null\n            });\n        });\n}\n\nexport const clearErrors = () => (dispatch) => {\n    dispatch({ type: CLEAR_ERRORS });\n  };"]},"metadata":{},"sourceType":"module"}