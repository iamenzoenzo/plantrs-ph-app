{"ast":null,"code":"var _jsxFileName = \"/Volumes/extra/is295/plantrs-ph-app/src/components/Plant.js\";\nimport React, { Component } from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport PropTypes from 'prop-types';\nimport MyButton from '../util/MyButton';\nimport DeletePlant from './DeletePlant';\nimport PlantDialog from './PlantDialog'; // Material UIs\n\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport { lightGreen } from '@material-ui/core/colors'; // Icons\n\nimport ChatIcon from '@material-ui/icons/Chat';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder'; // Redux stuff\n\nimport { connect } from 'react-redux';\nimport { likePlant, unlikePlant } from '../redux/actions/dataActions';\nconst styles = {\n  card: {\n    position: 'relative',\n    marginBottom: 20\n  },\n  content: {\n    padding: 20,\n    objectFit: 'cover',\n    minWidth: 400\n  },\n  media: {\n    Width: 300,\n    Height: 300,\n    paddingTop: '56.25%' // 16:9\n\n  },\n  avatar: {\n    backgroundColor: lightGreen[500]\n  }\n};\n\nclass Plant extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.likedPlant = () => {\n      if (this.props.user.likes && this.props.user.likes.find(like => like.plantId === this.props.plant.plantId)) return true;else return false;\n    };\n\n    this.likePlant = () => {\n      this.props.likePlant(this.props.plant.plantId);\n    };\n\n    this.unlikePlant = () => {\n      this.props.unlikePlant(this.props.plant.plantId);\n    };\n  }\n\n  render() {\n    dayjs.extend(relativeTime);\n    const {\n      classes,\n      plant: {\n        caption,\n        createDate,\n        userImage,\n        userHandle,\n        plantId,\n        plantName,\n        plantImg,\n        likeCount,\n        commentCount\n      },\n      user: {\n        authenticated,\n        credentials: {\n          handle\n        } // TO DO replace with { handle, role }\n\n      }\n    } = this.props;\n    const likeButton = !authenticated ? /*#__PURE__*/React.createElement(MyButton, {\n      tip: \"Like\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FavoriteBorder, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }\n    }))) : this.likedPlant() ? /*#__PURE__*/React.createElement(MyButton, {\n      tip: \"Unlike\",\n      onClick: this.unlikePlant,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FavoriteIcon, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    })) : /*#__PURE__*/React.createElement(MyButton, {\n      tip: \"Like\",\n      onClick: this.likePlant,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FavoriteBorder, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }));\n    const deleteButton = authenticated && userHandle === handle ?\n    /*#__PURE__*/\n    // TODO include OR for role = moderator\n    React.createElement(DeletePlant, {\n      plantId: plantId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }) : null;\n    return /*#__PURE__*/React.createElement(Card, {\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CardContent, {\n      className: classes.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      alt: userHandle,\n      src: userImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }), deleteButton, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      component: Link,\n      to: `/users/${userHandle}`,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, userHandle), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      component: \"p\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }, dayjs(createDate).fromNow())), /*#__PURE__*/React.createElement(CardMedia, {\n      className: classes.media,\n      image: plantImg,\n      title: plantName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(CardContent, {\n      className: classes.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }, likeButton, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }, likeCount, \" Likes\"), /*#__PURE__*/React.createElement(MyButton, {\n      tip: \"Comments\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ChatIcon, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    }, commentCount, \" Comments\"), /*#__PURE__*/React.createElement(\"span\", {\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }, plantName, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    }, plantName)), /*#__PURE__*/React.createElement(PlantDialog, {\n      plantId: plantId,\n      userHandle: userHandle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      component: \"p\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }\n    }, caption)));\n  }\n\n}\n\nPlant.propTypes = {\n  likePlant: PropTypes.func.isRequired,\n  unlikePlant: PropTypes.func.isRequired,\n  user: PropTypes.object.isRequired,\n  plant: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  user: state.user\n});\n\nconst mapActionsToProps = {\n  likePlant,\n  unlikePlant\n};\nexport default connect(mapStateToProps, mapActionsToProps)(withStyles(styles)(Plant));","map":{"version":3,"sources":["/Volumes/extra/is295/plantrs-ph-app/src/components/Plant.js"],"names":["React","Component","withStyles","Link","dayjs","relativeTime","PropTypes","MyButton","DeletePlant","PlantDialog","Card","CardMedia","CardContent","Avatar","Typography","lightGreen","ChatIcon","FavoriteIcon","FavoriteBorder","connect","likePlant","unlikePlant","styles","card","position","marginBottom","content","padding","objectFit","minWidth","media","Width","Height","paddingTop","avatar","backgroundColor","Plant","likedPlant","props","user","likes","find","like","plantId","plant","render","extend","classes","caption","createDate","userImage","userHandle","plantName","plantImg","likeCount","commentCount","authenticated","credentials","handle","likeButton","deleteButton","fromNow","propTypes","func","isRequired","object","mapStateToProps","state","mapActionsToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport PropTypes from 'prop-types';\nimport MyButton from '../util/MyButton';\nimport DeletePlant from './DeletePlant';\nimport PlantDialog from './PlantDialog';\n\n// Material UIs\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport { lightGreen } from '@material-ui/core/colors';\n\n// Icons\nimport ChatIcon from '@material-ui/icons/Chat';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\n\n// Redux stuff\nimport { connect } from 'react-redux';\nimport { likePlant, unlikePlant } from '../redux/actions/dataActions';\n\n\nconst styles = {\n    card: {\n        position: 'relative',\n        marginBottom: 20,\n    },\n    content: {\n        padding: 20,\n        objectFit: 'cover',\n        minWidth: 400,\n    },\n    media: {\n        Width: 300,\n        Height: 300,\n        paddingTop: '56.25%', // 16:9\n    },\n    avatar: {\n        backgroundColor: lightGreen[500],\n      },\n}\n\nclass Plant extends Component {\n    likedPlant = () => {\n        if(this.props.user.likes && \n            this.props.user.likes.find(\n                (like) => like.plantId === this.props.plant.plantId\n            )\n        )\n            return true;\n        else return false;\n    };\n    likePlant = () => {\n        this.props.likePlant(this.props.plant.plantId);\n    }\n    unlikePlant = () => {\n        this.props.unlikePlant(this.props.plant.plantId);\n    }\n    render() {\n        dayjs.extend(relativeTime)\n        const { \n                classes, \n                plant : { \n                    caption, \n                    createDate, \n                    userImage, \n                    userHandle, \n                    plantId, \n                    plantName, \n                    plantImg, \n                    likeCount, \n                    commentCount \n                },\n                user: {\n                    authenticated, credentials: { handle } // TO DO replace with { handle, role }\n                } \n            } = this.props;\n        const likeButton = !authenticated ? (\n            <MyButton tip=\"Like\">\n                <Link to=\"/login\">\n                    <FavoriteBorder color=\"primary\"/>\n                </Link>\n            </MyButton>\n        ) : (\n            this.likedPlant() ? (\n                <MyButton tip=\"Unlike\" onClick={this.unlikePlant}>\n                    <FavoriteIcon color=\"primary\"/>\n                </MyButton>\n            ) : (\n                <MyButton tip=\"Like\" onClick={this.likePlant}>\n                    <FavoriteBorder color=\"primary\"/>\n                </MyButton>\n            )\n        );\n        const deleteButton = \n        authenticated && userHandle === handle ? ( // TODO include OR for role = moderator\n            <DeletePlant plantId={plantId} />\n        ) : null;\n        return (\n            <Card className={classes.card}>\n                <CardContent className={classes.content}>\n                    <Avatar alt={userHandle} src={userImage} />\n                    {deleteButton}\n                    <Typography\n                         variant=\"body2\" \n                         component={Link} \n                         to={`/users/${userHandle}`} \n                         color=\"primary\">{userHandle}\n                    </Typography>\n                    \n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{dayjs(createDate).fromNow()}</Typography>\n                </CardContent>\n                <CardMedia className={classes.media} image={plantImg} title={plantName} />\n                \n                <CardContent className={classes.content}>\n                    {likeButton}\n                    <span>{likeCount} Likes</span>\n                    <MyButton tip=\"Comments\">\n                        <ChatIcon color=\"primary\"/>\n                    </MyButton>\n                    <span>{commentCount} Comments</span>\n                    \n                    <span variant=\"h5\">{plantName}\n                    <Typography variant=\"h5\">{plantName}</Typography>\n                    </span>\n                    <PlantDialog plantId={plantId} userHandle={userHandle}/>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{caption}</Typography>\n                </CardContent>\n\n            </Card>\n        );\n    }\n}\n\nPlant.propTypes = {\n    likePlant: PropTypes.func.isRequired,\n    unlikePlant: PropTypes.func.isRequired,\n    user: PropTypes.object.isRequired,\n    plant: PropTypes.object.isRequired,\n    classes: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    user: state.user\n})\n\nconst mapActionsToProps = {\n    likePlant,\n    unlikePlant\n}\n\nexport default connect(mapStateToProps, mapActionsToProps)(withStyles(styles)(Plant));\n"]},"metadata":{},"sourceType":"module"}