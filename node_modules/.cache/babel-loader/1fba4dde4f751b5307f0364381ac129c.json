{"ast":null,"code":"var _jsxFileName = \"/Volumes/extra/is295/plantrs-ph-app/src/components/layout/Notifications.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport PropTypes from 'prop-types'; // MUI\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport Badge from '@material-ui/core/Badge'; // Icons\n\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ChatIcon from '@material-ui/icons/Chat'; // Redux\n\nimport { connect } from 'react-redux';\nimport { markNotificationsRead } from '../../redux/actions/userActions';\n\nclass Notifications extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      anchorEl: null\n    };\n\n    this.handleOpen = event => {\n      this.setState({\n        anchorEl: event.target\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        anchorEl: null\n      });\n    };\n\n    this.onMenuOpened = () => {\n      let unreadNotificationsIds = this.props.notifications.filter(noti => !noti.read).map(noti => noti.notificationId);\n      this.props.markNotificationsRead(unreadNotificationsIds);\n    };\n  }\n\n  render() {\n    const notifications = this.props.notifications;\n    const anchorEl = this.state.anchorEl;\n    dayjs.extend(relativeTime);\n    let notificationsIcon;\n\n    if (notifications && notifications.length > 0) {\n      notifications.filter(noti => noti.read === false).length > 0 ? notificationsIcon = /*#__PURE__*/React.createElement(Badge, {\n        badgeContent: notifications.filter(noti => noti.read === false).length,\n        color: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(NotificationsIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }\n      })) : notificationsIcon = /*#__PURE__*/React.createElement(NotificationsIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 37\n        }\n      });\n    } else {\n      notificationsIcon = /*#__PURE__*/React.createElement(NotificationsIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 33\n        }\n      });\n    }\n\n    let notificationsMarkup = notifications && notifications.length > 0 ? notifications.map(noti => {\n      const verb = noti.type === 'like' ? 'liked' : 'commented on';\n      const time = dayjs(noti.createDate).fromNow();\n      const iconColor = noti.read ? 'primary' : 'secondary';\n      const icon = noti.type === 'like' ? /*#__PURE__*/React.createElement(FavoriteIcon, {\n        color: iconColor,\n        style: {\n          marginRight: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }\n      }) : /*#__PURE__*/React.createElement(ChatIcon, {\n        color: iconColor,\n        style: {\n          marginRight: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }\n      });\n      return /*#__PURE__*/React.createElement(MenuItem, {\n        key: noti.createDate,\n        onClick: this.handleClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }\n      }, icon, /*#__PURE__*/React.createElement(Typography, {\n        component: Link,\n        color: \"default\",\n        variant: \"body1\",\n        to: `/users/${noti.recipient}/plant/${noti.plantId}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }\n      }, noti.sender, \" \", verb, \" your plant \", time));\n    }) : /*#__PURE__*/React.createElement(MenuItem, {\n      onClick: this.handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, \"You have no notifications yet\");\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Tooltip, {\n      placement: \"top\",\n      title: \"Notifications\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      \"aria-owns\": anchorEl ? 'simple-menu' : undefined,\n      \"aria-haspopup\": \"true\",\n      onClick: this.handleOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, notificationsIcon)), /*#__PURE__*/React.createElement(Menu, {\n      anchorEl: anchorEl,\n      open: Boolean(anchorEl),\n      onClose: this.handleClose,\n      onEntered: this.onMenuOpened,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, notificationsMarkup));\n  }\n\n}\n\nNotifications.propTypes = {\n  markNotificationsRead: PropTypes.func.isRequired,\n  notifications: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  notifications: state.user.notifications\n});\n\nexport default connect(mapStateToProps, {\n  markNotificationsRead\n})(Notifications);","map":{"version":3,"sources":["/Volumes/extra/is295/plantrs-ph-app/src/components/layout/Notifications.js"],"names":["React","Component","Fragment","Link","dayjs","relativeTime","PropTypes","Menu","MenuItem","IconButton","Tooltip","Typography","Badge","NotificationsIcon","FavoriteIcon","ChatIcon","connect","markNotificationsRead","Notifications","state","anchorEl","handleOpen","event","setState","target","handleClose","onMenuOpened","unreadNotificationsIds","props","notifications","filter","noti","read","map","notificationId","render","extend","notificationsIcon","length","notificationsMarkup","verb","type","time","createDate","fromNow","iconColor","icon","marginRight","recipient","plantId","sender","undefined","Boolean","propTypes","func","isRequired","object","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport PropTypes from 'prop-types';\n// MUI\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport Badge from '@material-ui/core/Badge';\n// Icons\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ChatIcon from '@material-ui/icons/Chat';\n// Redux\nimport { connect } from 'react-redux';\nimport { markNotificationsRead } from '../../redux/actions/userActions';\n\nclass Notifications extends Component{\n    state = {\n        anchorEl: null\n    };\n    handleOpen = (event) => {\n        this.setState({ anchorEl: event.target });\n    };\n    handleClose = () => {\n        this.setState({ anchorEl: null });\n    };\n    onMenuOpened = () => {\n        let unreadNotificationsIds = this.props.notifications\n            .filter(noti => !noti.read)\n            .map(noti => noti.notificationId);\n        this.props.markNotificationsRead(unreadNotificationsIds);\n    };\n    render(){\n        const notifications = this.props.notifications;\n        const anchorEl = this.state.anchorEl;\n\n        dayjs.extend(relativeTime);\n\n        let notificationsIcon;\n        if(notifications && notifications.length > 0){\n            notifications.filter(noti => noti.read === false ).length > 0\n            ? notificationsIcon = (\n                <Badge badgeContent={notifications.filter(noti => noti.read === false ).length} color=\"secondary\">\n                    <NotificationsIcon/>\n                </Badge>\n            ) : (\n                notificationsIcon = <NotificationsIcon/>\n            )\n        } else {\n            notificationsIcon = <NotificationsIcon/>\n        }\n        let notificationsMarkup =\n            notifications && notifications.length > 0 ? (\n                notifications.map(noti => {\n                    const verb = noti.type === 'like' ? 'liked' : 'commented on';\n                    const time = dayjs(noti.createDate).fromNow();\n                    const iconColor = noti.read ? 'primary' : 'secondary';\n                    const icon = noti.type === 'like' ? (\n                        <FavoriteIcon color={iconColor} style={{ marginRight: 10 }}/>\n                    ) : (\n                        <ChatIcon color={iconColor} style={{ marginRight: 10 }}/>\n                    )\n\n                    return (\n                        <MenuItem key={noti.createDate} onClick={this.handleClose}>\n                            {icon}\n                            <Typography\n                                component={Link}\n                                color=\"default\"\n                                variant=\"body1\"\n                                to={`/users/${noti.recipient}/plant/${noti.plantId}`}\n                                >\n                                    {noti.sender} {verb} your plant {time}\n                                </Typography>\n                        </MenuItem>\n                    )\n                })\n            ) : (\n                <MenuItem onClick={this.handleClose}>\n                    You have no notifications yet\n                </MenuItem>\n            )\n        return (\n            <Fragment>\n                <Tooltip placement=\"top\" title=\"Notifications\">\n                    <IconButton aria-owns={anchorEl ? 'simple-menu' : undefined}\n                        aria-haspopup=\"true\"\n                        onClick={this.handleOpen}\n                        >\n                            {notificationsIcon}\n                        </IconButton>\n                </Tooltip>\n                <Menu\n                anchorEl={anchorEl}\n                open={Boolean(anchorEl)}\n                onClose={this.handleClose}\n                onEntered={this.onMenuOpened}\n                >\n                    {notificationsMarkup}\n                </Menu>\n            </Fragment>\n        )\n    }\n}\n\nNotifications.propTypes = {\n    markNotificationsRead: PropTypes.func.isRequired,\n    notifications: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    notifications: state.user.notifications\n})\n\nexport default connect(mapStateToProps, { markNotificationsRead })(Notifications);"]},"metadata":{},"sourceType":"module"}