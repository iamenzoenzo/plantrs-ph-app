{"ast":null,"code":"var _jsxFileName = \"/Volumes/extra/is295/plantrs-ph-app/src/components/plant/PlantDialog.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../../util/MyButton';\nimport dayjs from 'dayjs';\nimport LikeButton from './LikeButton';\nimport Comments from './Comments';\nimport { Link } from 'react-router-dom'; // MUI \n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'; // Icons\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport UnfoldMore from '@material-ui/icons/UnfoldMore';\nimport ChatIcon from '@material-ui/icons/Chat'; // Redux stuff\n\nimport { connect } from 'react-redux';\nimport { getPlant } from '../../redux/actions/dataActions';\n\nconst styles = theme => ({ ...theme.spreadThis,\n  profileImage: {\n    maxWidth: 50,\n    height: 50,\n    borderRadius: '50%',\n    objectFit: 'cover'\n  },\n  plantImage: {\n    maxWidth: '100%',\n    height: 'auto',\n    borderRadius: '5%',\n    objectFit: 'cover'\n  },\n  dialogContent: {\n    padding: 20\n  },\n  closeButton: {\n    position: 'absolute',\n    left: '90%'\n  },\n  expandButton: {\n    position: 'absolute',\n    left: '90%'\n  },\n  spinnerDiv: {\n    textAlign: 'center',\n    marginTop: 50,\n    marginBottom: 50\n  }\n});\n\nclass PlantDialog extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false\n    };\n\n    this.handleOpen = () => {\n      this.setState({\n        open: true\n      });\n      this.props.getPlant(this.props.plantId);\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      plant: {\n        plantId,\n        plantName,\n        createDate,\n        kingdom,\n        phylum,\n        klass,\n        family,\n        urder,\n        genus,\n        species,\n        plantImg,\n        caption,\n        userHandle,\n        userImage,\n        likeCount,\n        commentCount,\n        comments\n      },\n      UI: {\n        loading\n      }\n    } = this.props;\n    const dialogMarkup = loading ? /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.spinnerDiv,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CircularProgress, {\n      size: 150,\n      thickness: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    })) : /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: plantImg,\n      alt: plantName,\n      className: classes.plantImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"hr\", {\n      className: classes.invisibleSeparator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }, plantName), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }, caption), /*#__PURE__*/React.createElement(\"hr\", {\n      className: classes.visibleSeparator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }\n    }, \"Scientific Classification\")), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }, \"Kingdom: \", kingdom), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }, \"Phylum: \", phylum), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }, \"Class: \", klass), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }, \"Family: \", family), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }, \"Order: \", urder), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }, \"Genus: \", genus), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }\n    }, \"Species: \", species), /*#__PURE__*/React.createElement(\"hr\", {\n      className: classes.visibleSeparator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(LikeButton, {\n      plantId: plantId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    }, likeCount, \" Likes\"), /*#__PURE__*/React.createElement(MyButton, {\n      tip: \"Comments\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ChatIcon, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }\n    }, commentCount, \" Comments\"), /*#__PURE__*/React.createElement(Comments, {\n      comments: comments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }\n    })));\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MyButton, {\n      onClick: this.handleOpen,\n      tip: \"Expand plant\",\n      tipClassName: classes.expandButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(UnfoldMore, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      fullWidth: true,\n      maxWidth: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(MyButton, {\n      tip: \"Close\",\n      onClick: this.handleClose,\n      tipClassName: classes.closeButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CloseIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(DialogTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: userImage,\n      alt: userHandle,\n      className: classes.profileImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      component: Link,\n      color: \"primary\",\n      variant: \"h5\",\n      to: `/users/${userHandle}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 25\n      }\n    }, \"@\", userHandle), /*#__PURE__*/React.createElement(\"hr\", {\n      className: classes.invisibleSeparator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }\n    }, dayjs(createDate).fromNow())), /*#__PURE__*/React.createElement(DialogContent, {\n      className: classes.dialogContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }\n    }, dialogMarkup)));\n  }\n\n}\n\n;\nPlantDialog.propTypes = {\n  getPlant: PropTypes.func.isRequired,\n  plantId: PropTypes.string.isRequired,\n  userHandle: PropTypes.string.isRequired,\n  plant: PropTypes.object.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  plant: state.data.plant,\n  UI: state.UI\n});\n\nconst mapActionsToProps = {\n  getPlant\n};\nexport default connect(mapStateToProps, mapActionsToProps)(withStyles(styles)(PlantDialog));","map":{"version":3,"sources":["/Volumes/extra/is295/plantrs-ph-app/src/components/plant/PlantDialog.js"],"names":["React","Component","Fragment","PropTypes","withStyles","MyButton","dayjs","LikeButton","Comments","Link","Dialog","DialogContent","DialogTitle","CircularProgress","Grid","Typography","CloseIcon","UnfoldMore","ChatIcon","connect","getPlant","styles","theme","spreadThis","profileImage","maxWidth","height","borderRadius","objectFit","plantImage","dialogContent","padding","closeButton","position","left","expandButton","spinnerDiv","textAlign","marginTop","marginBottom","PlantDialog","state","open","handleOpen","setState","props","plantId","handleClose","render","classes","plant","plantName","createDate","kingdom","phylum","klass","family","urder","genus","species","plantImg","caption","userHandle","userImage","likeCount","commentCount","comments","UI","loading","dialogMarkup","invisibleSeparator","visibleSeparator","fromNow","propTypes","func","isRequired","string","object","mapStateToProps","data","mapActionsToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,IAAT,QAAqB,kBAArB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,QAAP,MAAqB,yBAArB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,iCAAzB;;AAGA,MAAMC,MAAM,GAAIC,KAAD,KAAY,EACvB,GAAGA,KAAK,CAACC,UADc;AAEvBC,EAAAA,YAAY,EAAE;AACVC,IAAAA,QAAQ,EAAE,EADA;AAEVC,IAAAA,MAAM,EAAE,EAFE;AAGVC,IAAAA,YAAY,EAAE,KAHJ;AAIVC,IAAAA,SAAS,EAAE;AAJD,GAFS;AAQvBC,EAAAA,UAAU,EAAE;AACRJ,IAAAA,QAAQ,EAAE,MADF;AAERC,IAAAA,MAAM,EAAE,MAFA;AAGRC,IAAAA,YAAY,EAAE,IAHN;AAIRC,IAAAA,SAAS,EAAE;AAJH,GARW;AAcvBE,EAAAA,aAAa,EAAE;AACXC,IAAAA,OAAO,EAAE;AADE,GAdQ;AAiBvBC,EAAAA,WAAW,EAAE;AACTC,IAAAA,QAAQ,EAAE,UADD;AAETC,IAAAA,IAAI,EAAE;AAFG,GAjBU;AAqBvBC,EAAAA,YAAY,EAAE;AACVF,IAAAA,QAAQ,EAAE,UADA;AAEVC,IAAAA,IAAI,EAAE;AAFI,GArBS;AAyBvBE,EAAAA,UAAU,EAAE;AACRC,IAAAA,SAAS,EAAE,QADH;AAERC,IAAAA,SAAS,EAAE,EAFH;AAGRC,IAAAA,YAAY,EAAE;AAHN;AAzBW,CAAZ,CAAf;;AAgCA,MAAMC,WAAN,SAA0BvC,SAA1B,CAAmC;AAAA;AAAA;AAAA,SAC/BwC,KAD+B,GACvB;AACJC,MAAAA,IAAI,EAAE;AADF,KADuB;;AAAA,SAI/BC,UAJ+B,GAIlB,MAAM;AACf,WAAKC,QAAL,CAAc;AAAEF,QAAAA,IAAI,EAAE;AAAR,OAAd;AACA,WAAKG,KAAL,CAAWzB,QAAX,CAAoB,KAAKyB,KAAL,CAAWC,OAA/B;AACH,KAP8B;;AAAA,SAQ/BC,WAR+B,GAQjB,MAAM;AAChB,WAAKH,QAAL,CAAc;AAAEF,QAAAA,IAAI,EAAE;AAAR,OAAd;AACH,KAV8B;AAAA;;AAW/BM,EAAAA,MAAM,GAAE;AACJ,UAAM;AACFC,MAAAA,OADE;AAEFC,MAAAA,KAAK,EAAE;AACHJ,QAAAA,OADG;AAEHK,QAAAA,SAFG;AAGHC,QAAAA,UAHG;AAIHC,QAAAA,OAJG;AAKHC,QAAAA,MALG;AAMHC,QAAAA,KANG;AAOHC,QAAAA,MAPG;AAQHC,QAAAA,KARG;AASHC,QAAAA,KATG;AAUHC,QAAAA,OAVG;AAWHC,QAAAA,QAXG;AAYHC,QAAAA,OAZG;AAaHC,QAAAA,UAbG;AAcHC,QAAAA,SAdG;AAeHC,QAAAA,SAfG;AAgBHC,QAAAA,YAhBG;AAiBHC,QAAAA;AAjBG,OAFL;AAqBFC,MAAAA,EAAE,EAAE;AAAEC,QAAAA;AAAF;AArBF,QAsBF,KAAKvB,KAtBT;AAwBA,UAAMwB,YAAY,GAAGD,OAAO,gBACxB;AAAK,MAAA,SAAS,EAAEnB,OAAO,CAACb,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AAAkB,MAAA,IAAI,EAAE,GAAxB;AAA6B,MAAA,SAAS,EAAE,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADwB,gBAKxB,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,GAAG,EAAEwB,QAAV;AAAoB,MAAA,GAAG,EAAET,SAAzB;AAAoC,MAAA,SAAS,EAAEF,OAAO,CAACpB,UAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAII,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAEoB,OAAO,CAACqB,kBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKnB,SADL,CAFJ,eAKI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKU,OADL,CALJ,eAQI;AAAI,MAAA,SAAS,EAAEZ,OAAO,CAACsB,gBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,eASI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADJ,CATJ,eAYI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACclB,OADd,CAZJ,eAeI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACaC,MADb,CAfJ,eAkBI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACYC,KADZ,CAlBJ,eAqBI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACaC,MADb,CArBJ,eAwBI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACYC,KADZ,CAxBJ,eA2BI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACYC,KADZ,CA3BJ,eA8BI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACcC,OADd,CA9BJ,eAiCI;AAAI,MAAA,SAAS,EAAEV,OAAO,CAACsB,gBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjCJ,eAkCI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAEzB,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlCJ,eAmCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOkB,SAAP,WAnCJ,eAoCI,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CApCJ,eAuCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOC,YAAP,cAvCJ,eAwCI,oBAAC,QAAD;AAAU,MAAA,QAAQ,EAAEC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxCJ,CAJJ,CALJ;AAsDA,wBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAE,KAAKvB,UAAxB;AAAoC,MAAA,GAAG,EAAC,cAAxC;AAAuD,MAAA,YAAY,EAAEM,OAAO,CAACd,YAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAII,oBAAC,MAAD;AACA,MAAA,IAAI,EAAE,KAAKM,KAAL,CAAWC,IADjB;AAEA,MAAA,OAAO,EAAE,KAAKK,WAFd;AAGA,MAAA,SAAS,MAHT;AAIA,MAAA,QAAQ,EAAC,IAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAMI,oBAAC,QAAD;AACI,MAAA,GAAG,EAAC,OADR;AAEI,MAAA,OAAO,EAAE,KAAKA,WAFlB;AAGI,MAAA,YAAY,EAAEE,OAAO,CAACjB,WAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CANJ,eAaI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,GAAG,EAAE+B,SAAV;AAAqB,MAAA,GAAG,EAAED,UAA1B;AAAsC,MAAA,SAAS,EAAEb,OAAO,CAACzB,YAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,eAEI,oBAAC,UAAD;AACI,MAAA,SAAS,EAAEf,IADf;AAEI,MAAA,KAAK,EAAC,SAFV;AAGI,MAAA,OAAO,EAAC,IAHZ;AAII,MAAA,EAAE,EAAG,UAASqD,UAAW,EAJ7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAMMA,UANN,CAFJ,eAUI;AAAI,MAAA,SAAS,EAAEb,OAAO,CAACqB,kBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVJ,eAWI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,OAApB;AAA4B,MAAA,KAAK,EAAC,eAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKhE,KAAK,CAAC8C,UAAD,CAAL,CAAkBoB,OAAlB,EADL,CAXJ,CAbJ,eA6BI,oBAAC,aAAD;AAAe,MAAA,SAAS,EAAEvB,OAAO,CAACnB,aAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKuC,YADL,CA7BJ,CAJJ,CADJ;AAyCH;;AAnI8B;;AAqIlC;AAED7B,WAAW,CAACiC,SAAZ,GAAwB;AACpBrD,EAAAA,QAAQ,EAAEjB,SAAS,CAACuE,IAAV,CAAeC,UADL;AAEpB7B,EAAAA,OAAO,EAAE3C,SAAS,CAACyE,MAAV,CAAiBD,UAFN;AAGpBb,EAAAA,UAAU,EAAE3D,SAAS,CAACyE,MAAV,CAAiBD,UAHT;AAIpBzB,EAAAA,KAAK,EAAE/C,SAAS,CAAC0E,MAAV,CAAiBF,UAJJ;AAKpBR,EAAAA,EAAE,EAAEhE,SAAS,CAAC0E,MAAV,CAAiBF;AALD,CAAxB;;AAQA,MAAMG,eAAe,GAAGrC,KAAK,KAAK;AAC9BS,EAAAA,KAAK,EAAET,KAAK,CAACsC,IAAN,CAAW7B,KADY;AAE9BiB,EAAAA,EAAE,EAAE1B,KAAK,CAAC0B;AAFoB,CAAL,CAA7B;;AAKA,MAAMa,iBAAiB,GAAG;AACtB5D,EAAAA;AADsB,CAA1B;AAIA,eAAeD,OAAO,CAAC2D,eAAD,EAAkBE,iBAAlB,CAAP,CAA4C5E,UAAU,CAACiB,MAAD,CAAV,CAAmBmB,WAAnB,CAA5C,CAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../../util/MyButton';\nimport dayjs from 'dayjs';\nimport LikeButton from './LikeButton';\nimport Comments from './Comments';\nimport { Link } from 'react-router-dom';\n// MUI \nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n// Icons\nimport CloseIcon from '@material-ui/icons/Close';\nimport UnfoldMore from '@material-ui/icons/UnfoldMore';\nimport ChatIcon from '@material-ui/icons/Chat';\n// Redux stuff\nimport { connect } from 'react-redux';\nimport { getPlant } from '../../redux/actions/dataActions';\n\n\nconst styles = (theme) => ({\n    ...theme.spreadThis,\n    profileImage: {\n        maxWidth: 50,\n        height: 50,\n        borderRadius: '50%',\n        objectFit: 'cover'\n    },\n    plantImage: {\n        maxWidth: '100%',\n        height: 'auto',\n        borderRadius: '5%',\n        objectFit: 'cover'\n    },\n    dialogContent: {\n        padding: 20\n    },\n    closeButton: {\n        position: 'absolute',\n        left: '90%'\n    },\n    expandButton: {\n        position: 'absolute',\n        left: '90%'\n    },\n    spinnerDiv: {\n        textAlign: 'center',\n        marginTop: 50,\n        marginBottom: 50\n    }\n})\n\nclass PlantDialog extends Component{\n    state = {\n        open: false\n    }\n    handleOpen = () => {\n        this.setState({ open: true });\n        this.props.getPlant(this.props.plantId);\n    }\n    handleClose = () => {\n        this.setState({ open: false });\n    }\n    render(){\n        const { \n            classes, \n            plant: { \n                plantId, \n                plantName, \n                createDate,\n                kingdom, \n                phylum, \n                klass, \n                family, \n                urder, \n                genus, \n                species, \n                plantImg, \n                caption, \n                userHandle, \n                userImage, \n                likeCount, \n                commentCount,\n                comments \n            }, \n            UI: { loading } \n        } = this.props;\n\n        const dialogMarkup = loading ? (\n            <div className={classes.spinnerDiv} >\n                <CircularProgress size={150} thickness={2} />\n            </div>\n        ) : (\n            <Grid container spacing={2}>\n                <Grid item xs={6}>\n                    <img src={plantImg} alt={plantName} className={classes.plantImage}/>\n                </Grid>\n                <Grid item sm={6}>\n                    <hr className={classes.invisibleSeparator}/>\n                    <Typography variant=\"h5\">\n                        {plantName}\n                    </Typography>\n                    <Typography variant=\"body1\">\n                        {caption}\n                    </Typography>\n                    <hr className={classes.visibleSeparator}/>\n                    <Typography variant=\"body2\">\n                        <strong>Scientific Classification</strong>\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        Kingdom: {kingdom}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        Phylum: {phylum}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        Class: {klass}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        Family: {family}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        Order: {urder}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        Genus: {genus}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        Species: {species}\n                    </Typography>\n                    <hr className={classes.visibleSeparator}/>\n                    <LikeButton plantId={plantId}/>\n                    <span>{likeCount} Likes</span>\n                    <MyButton tip=\"Comments\">\n                        <ChatIcon color=\"primary\"/>\n                    </MyButton>\n                    <span>{commentCount} Comments</span>\n                    <Comments comments={comments}/>\n                </Grid>\n            </Grid>\n        )\n\n        return (\n            <Fragment>\n                <MyButton onClick={this.handleOpen} tip=\"Expand plant\" tipClassName={classes.expandButton}>\n                    <UnfoldMore color=\"primary\"/>\n                </MyButton>\n                <Dialog\n                open={this.state.open}\n                onClose={this.handleClose}\n                fullWidth\n                maxWidth=\"sm\"\n                >\n                    <MyButton\n                        tip=\"Close\"\n                        onClick={this.handleClose}\n                        tipClassName={classes.closeButton}\n                    >\n                        <CloseIcon/>\n                    </MyButton>\n                    <DialogTitle>\n                    <img src={userImage} alt={userHandle} className={classes.profileImage}/>\n                        <Typography\n                            component={Link}\n                            color=\"primary\"\n                            variant=\"h5\"\n                            to={`/users/${userHandle}`}\n                        >\n                            @{userHandle}\n                        </Typography>\n                        <hr className={classes.invisibleSeparator}/>\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                            {dayjs(createDate).fromNow()}\n                        </Typography>\n                    </DialogTitle>\n                    \n                    <DialogContent className={classes.dialogContent}>\n                        {dialogMarkup}\n                    </DialogContent>\n                </Dialog>\n            </Fragment>\n\n        )\n    }\n\n};\n\nPlantDialog.propTypes = {\n    getPlant: PropTypes.func.isRequired,\n    plantId: PropTypes.string.isRequired,\n    userHandle: PropTypes.string.isRequired,\n    plant: PropTypes.object.isRequired,\n    UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    plant: state.data.plant,\n    UI: state.UI\n});\n\nconst mapActionsToProps = {\n    getPlant\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(withStyles(styles)(PlantDialog))"]},"metadata":{},"sourceType":"module"}