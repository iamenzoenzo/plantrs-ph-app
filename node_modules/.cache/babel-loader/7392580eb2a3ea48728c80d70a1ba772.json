{"ast":null,"code":"import _defineProperty from \"/Volumes/extra/is295/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Volumes/extra/is295/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/extra/is295/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Volumes/extra/is295/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/extra/is295/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Volumes/extra/is295/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectSpread from \"/Volumes/extra/is295/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Volumes/extra/is295/plantrs-ph-app/src/components/PostPlant.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../util/MyButton'; // Redux stuff\n\nimport { connect } from 'react-redux';\nimport { postPlant } from '../redux/actions/dataActions'; // MUI stuff\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress'; // Icons\n\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\n\nvar styles = function styles(theme) {\n  return _objectSpread({}, theme.spreadThis, {\n    submitButton: {\n      position: 'relative'\n    },\n    progressSpinner: {\n      position: 'absolute'\n    },\n    closeButton: {\n      position: 'absolute',\n      left: '90%',\n      top: '2%'\n    }\n  });\n};\n\nvar PostPlant = /*#__PURE__*/function (_Component) {\n  _inherits(PostPlant, _Component);\n\n  function PostPlant() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PostPlant);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PostPlant)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      open: false,\n      plantName: '',\n      phylum: '',\n      klass: '',\n      urder: '',\n      family: '',\n      genus: '',\n      species: '',\n      caption: '',\n      errors: {}\n    };\n\n    _this.handleOpen = function () {\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.handleClose = function () {\n      _this.setState({\n        open: false\n      });\n    };\n\n    _this.handleChange = function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault();\n\n      _this.props.postPlant({\n        plantName: _this.state.plantName\n      });\n\n      _this.props.postPlant({\n        caption: _this.state.caption\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(PostPlant, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n\n    /* static getDerivedStateFromProps(props) {\n        if (props.UI.errors) {\n          return {\n            errors: props.UI.errors\n          }\n        }\n        return null;\n    }; */\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (nextProps.UI.errors) {\n        this.setState({\n          errors: nextProps.UI.errors\n        });\n      }\n\n      if (!nextProps.UI.errors && !nextProps.UI.loading) {\n        this.setState({\n          body: '',\n          open: false,\n          errors: {}\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var errors = this.state.errors;\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          loading = _this$props.UI.loading;\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MyButton, {\n        onClick: this.handleOpen,\n        tip: \"Post a Plant!\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AddIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(Dialog, {\n        open: this.state.open,\n        onClose: this.handleClose,\n        fullWidth: true,\n        maxWidth: \"sm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(MyButton, {\n        tip: \"Close\",\n        onClick: this.handleClose,\n        tipClassName: classes.closeButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(CloseIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(DialogTitle, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }\n      }, \"Post a new plant\"), /*#__PURE__*/React.createElement(DialogContent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        name: \"plantName\",\n        type: \"text\",\n        label: \"PLANT\",\n        placeholder: \"Name of your plant\",\n        error: errors.plantName ? true : false,\n        helperText: errors.plantName,\n        className: classes.textField,\n        onChange: this.handleChange,\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(TextField, {\n        name: \"caption\",\n        type: \"text\",\n        label: \"DESCRIPTION\",\n        multiline: true,\n        rows: \"3\",\n        placeholder: \"Describe your plant\",\n        error: errors.caption ? true : false,\n        helperText: errors.caption,\n        className: classes.textField,\n        onChange: this.handleChange,\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        className: classes.submitButton,\n        disabled: loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 33\n        }\n      }, \"Submit\", loading && /*#__PURE__*/React.createElement(CircularProgress, {\n        size: 20,\n        className: classes.progressSpinner,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 45\n        }\n      }))))));\n    }\n  }]);\n\n  return PostPlant;\n}(Component);\n\nPostPlant.propTypes = {\n  postPlant: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    UI: state.UI\n  };\n};\n\nexport default connect(mapStateToProps, {\n  postPlant: postPlant\n})(withStyles(styles)(PostPlant));","map":{"version":3,"sources":["/Volumes/extra/is295/plantrs-ph-app/src/components/PostPlant.js"],"names":["React","Component","Fragment","PropTypes","withStyles","MyButton","connect","postPlant","Button","TextField","Dialog","DialogActions","DialogContent","DialogTitle","CircularProgress","AddIcon","CloseIcon","styles","theme","spreadThis","submitButton","position","progressSpinner","closeButton","left","top","PostPlant","state","open","plantName","phylum","klass","urder","family","genus","species","caption","errors","handleOpen","setState","handleClose","handleChange","event","target","name","value","handleSubmit","preventDefault","props","nextProps","UI","loading","body","classes","textField","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../util/MyButton';\n\n// Redux stuff\nimport { connect } from 'react-redux';\nimport { postPlant } from '../redux/actions/dataActions';\n\n// MUI stuff\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// Icons\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst styles = (theme) => ({\n    ...theme.spreadThis,\n    submitButton:{\n        position: 'relative'\n    },\n    progressSpinner:{\n        position: 'absolute'\n    },\n    closeButton:{\n        position: 'absolute',\n        left: '90%',\n        top: '2%'\n    }\n})\n\nclass PostPlant extends Component{\n    state = {\n        open: false,\n        plantName: '',\n        phylum: '',\n        klass: '',\n        urder: '',\n        family: '',\n        genus: '',\n        species: '',\n        caption: '',\n        errors: {}\n    };\n    /* static getDerivedStateFromProps(props) {\n        if (props.UI.errors) {\n          return {\n            errors: props.UI.errors\n          }\n        }\n        return null;\n    }; */\n    UNSAFE_componentWillReceiveProps(nextProps){\n        if(nextProps.UI.errors){\n            this.setState({\n                errors: nextProps.UI.errors\n            });\n        }\n        if (!nextProps.UI.errors && !nextProps.UI.loading) {\n            this.setState({ body: '', open: false, errors: {} });\n        }\n    }\n    handleOpen = () => {\n        this.setState({ open: true })\n    };\n    handleClose = () => {\n        this.setState({ open: false })\n    };\n    handleChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value})\n    };\n    handleSubmit =(event) => {\n        event.preventDefault();\n        this.props.postPlant({ plantName: this.state.plantName });\n        this.props.postPlant({ caption: this.state.caption });\n    }\n    render(){\n        const { errors } = this.state;\n        const { classes, UI: { loading }} = this.props;\n        return (\n            <Fragment>\n                <MyButton onClick={this.handleOpen} tip=\"Post a Plant!\">\n                    <AddIcon/>\n                </MyButton>\n                <Dialog open={this.state.open} onClose={this.handleClose} fullWidth maxWidth=\"sm\">\n                    <MyButton tip=\"Close\" onClick={this.handleClose} tipClassName={classes.closeButton}>\n                        <CloseIcon/>\n                    </MyButton>\n                    <DialogTitle>Post a new plant</DialogTitle>\n                    <DialogContent>\n                        <form onSubmit={this.handleSubmit}>\n                            <TextField\n                                name=\"plantName\"\n                                type=\"text\"\n                                label=\"PLANT\"\n                                placeholder=\"Name of your plant\"\n                                error={errors.plantName ? true : false}\n                                helperText={errors.plantName}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            <TextField\n                                name=\"caption\"\n                                type=\"text\"\n                                label=\"DESCRIPTION\"\n                                multiline\n                                rows=\"3\"\n                                placeholder=\"Describe your plant\"\n                                error={errors.caption ? true : false}\n                                helperText={errors.caption}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                                <Button type=\"submit\" variant=\"contained\" color=\"primary\"\n                                    className={classes.submitButton} disabled={loading}>\n                                        Submit\n                                        {loading && (\n                                            <CircularProgress size={20} className={classes.progressSpinner}/>\n                                        )}\n                                    </Button>\n                        </form>\n                    </DialogContent>\n                </Dialog>\n            </Fragment>\n        )\n    }\n}\n\nPostPlant.propTypes = {\n    postPlant: PropTypes.func.isRequired,\n    UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    UI: state.UI\n})\n\nexport default connect(\n    mapStateToProps, \n    { postPlant }\n)(withStyles(styles)(PostPlant));"]},"metadata":{},"sourceType":"module"}