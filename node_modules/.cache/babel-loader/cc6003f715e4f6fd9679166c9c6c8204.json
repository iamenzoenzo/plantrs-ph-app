{"ast":null,"code":"import { SET_USER, SET_ERRORS, CLEAR_ERRORS, LOADING_UI, SET_UNAUTHENTICATED, LOADING_USER } from '../types';\nimport axios from 'axios';\nexport const loginUser = (userData, history) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/login', userData).then(res => {\n    setAuthorizationHeader(res.data.token);\n    dispatch(getUserData());\n    dispatch({\n      type: CLEAR_ERRORS\n    }); // clears the error before it redirects\n\n    history.push('/'); // redirects to homepage upon successful login\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const signupUser = (newUserData, history) => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/signup', newUserData).then(res => {\n    setAuthorizationHeader(res.data.token);\n    dispatch(getUserData());\n    dispatch({\n      type: CLEAR_ERRORS\n    }); // clears the error before it redirects\n\n    history.push('/'); // redirects to homepage upon successful login\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const logoutUser = () => dispatch => {\n  localStorage.removeItem('FBIdToken');\n  delete axios.defaults.headers.common['Authorization'];\n  dispatch({\n    type: SET_UNAUTHENTICATED\n  });\n};\nexport const getUserData = () => dispatch => {\n  dispatch({\n    type: LOADING_USER\n  });\n  axios.get('/user').then(res => {\n    dispatch({\n      type: SET_USER,\n      payload: res.data\n    });\n  }).catch(err => console.log(err));\n};\nexport const uploadImage = formData => dispatch => {\n  dispatch({\n    type: LOADING_USER\n  });\n  axios.post('/user/image', formData).then(() => {\n    dispatch(getUserData());\n  }).catch(err => console.log(err));\n};\nexport const editUserDetails = userDetails => dispatch => {\n  dispatch({\n    type: LOADING_USER\n  });\n  axios.post('/user', userDetails).then(() => {\n    dispatch(getUserData());\n  }).catch(err => console.log(err));\n};\n\nconst setAuthorizationHeader = token => {\n  const FBIdToken = `Bearer ${token}`;\n  localStorage.setItem('FBIdToken', FBIdToken);\n  axios.defaults.headers.common['Authorization'] = FBIdToken;\n};","map":{"version":3,"sources":["/Volumes/extra/is295/plantrs-ph-app/src/redux/actions/userActions.js"],"names":["SET_USER","SET_ERRORS","CLEAR_ERRORS","LOADING_UI","SET_UNAUTHENTICATED","LOADING_USER","axios","loginUser","userData","history","dispatch","type","post","then","res","setAuthorizationHeader","data","token","getUserData","push","catch","err","payload","response","signupUser","newUserData","logoutUser","localStorage","removeItem","defaults","headers","common","get","console","log","uploadImage","formData","editUserDetails","userDetails","FBIdToken","setItem"],"mappings":"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","sourcesContent":["import { \n    SET_USER, \n    SET_ERRORS, \n    CLEAR_ERRORS, \n    LOADING_UI, \n    SET_UNAUTHENTICATED,\n    LOADING_USER \n} from '../types';\nimport axios from 'axios';\n\nexport const loginUser = (userData, history) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios.post('/login', userData)\n        .then(res => {\n            setAuthorizationHeader(res.data.token)\n            dispatch(getUserData());\n            dispatch({ type: CLEAR_ERRORS }); // clears the error before it redirects\n            history.push('/'); // redirects to homepage upon successful login\n        })\n        .catch(err => {\n            dispatch({\n                type: SET_ERRORS,\n                payload: err.response.data\n            })\n        });\n};\n\nexport const signupUser = (newUserData, history) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios.post('/signup', newUserData)\n        .then(res => {\n            setAuthorizationHeader(res.data.token)\n            dispatch(getUserData());\n            dispatch({ type: CLEAR_ERRORS }); // clears the error before it redirects\n            history.push('/'); // redirects to homepage upon successful login\n        })\n        .catch(err => {\n            dispatch({\n                type: SET_ERRORS,\n                payload: err.response.data\n            })\n        });\n};\n\nexport const logoutUser = () => (dispatch) => {\n    localStorage.removeItem('FBIdToken');\n    delete axios.defaults.headers.common['Authorization'];\n    dispatch({ type: SET_UNAUTHENTICATED })\n}\n\nexport const getUserData = () => (dispatch) => {\n    dispatch({ type: LOADING_USER });\n    axios.get('/user')\n        .then(res => {\n            dispatch({\n                type: SET_USER,\n                payload: res.data\n            })\n        })\n        .catch(err => console.log(err));\n};\n\nexport const uploadImage = (formData) => (dispatch) => {\n    dispatch({ type: LOADING_USER });\n    axios.post('/user/image', formData)\n        .then(() => {\n            dispatch(getUserData());\n        })\n        .catch(err => console.log(err));\n};\n\nexport const editUserDetails = (userDetails) => (dispatch) => {\n    dispatch({ type: LOADING_USER });\n    axios.post('/user', userDetails)\n        .then(() => {\n            dispatch(getUserData());\n        })\n        .catch(err => console.log(err));\n};\n\nconst setAuthorizationHeader = (token) => {\n    const FBIdToken = `Bearer ${token}`;\n            localStorage.setItem('FBIdToken', FBIdToken);\n            axios.defaults.headers.common['Authorization'] = FBIdToken;\n};"]},"metadata":{},"sourceType":"module"}