{"ast":null,"code":"import { SET_PLANTS, LOADING_DATA, LIKE_PLANT, UNLIKE_PLANT, DELETE_PLANT, SET_ERRORS, POST_PLANT, CLEAR_ERRORS, LOADING_UI } from '../types';\nimport axios from 'axios'; // Get all plants\n\nexport var getPlants = function getPlants() {\n  return function (dispatch) {\n    dispatch({\n      type: LOADING_DATA\n    });\n    axios.get('/plants').then(function (res) {\n      dispatch({\n        type: SET_PLANTS,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: SET_PLANTS,\n        payload: []\n      });\n    });\n  };\n}; // Post a plant\n\nexport var postPlant = function postPlant(newPlant) {\n  return function (dispatch) {\n    dispatch({\n      type: LOADING_UI\n    });\n    axios.post('/plant', newPlant).then(function (res) {\n      dispatch({\n        type: POST_PLANT,\n        payload: res.data\n      });\n      dispatch({\n        type: CLEAR_ERRORS\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: SET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Like a plant\n\nexport var likePlant = function likePlant(plantId) {\n  return function (dispatch) {\n    axios.get(\"/plant/\".concat(plantId, \"/like\")).then(function (res) {\n      dispatch({\n        type: LIKE_PLANT,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}; // Unlike a plant\n\nexport var unlikePlant = function unlikePlant(plantId) {\n  return function (dispatch) {\n    axios.get(\"/plant/\".concat(plantId, \"/unlike\")).then(function (res) {\n      dispatch({\n        type: UNLIKE_PLANT,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}; // Delete a plant\n\nexport var deletePlant = function deletePlant(plantId) {\n  return function (dispatch) {\n    axios.delete(\"/plant/\".concat(plantId)).then(function () {\n      dispatch({\n        type: DELETE_PLANT,\n        paylod: plantId\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n};","map":{"version":3,"sources":["/Volumes/extra/is295/plantrs-ph-app/src/redux/actions/dataActions.js"],"names":["SET_PLANTS","LOADING_DATA","LIKE_PLANT","UNLIKE_PLANT","DELETE_PLANT","SET_ERRORS","POST_PLANT","CLEAR_ERRORS","LOADING_UI","axios","getPlants","dispatch","type","get","then","res","payload","data","catch","err","postPlant","newPlant","post","response","likePlant","plantId","console","log","unlikePlant","deletePlant","delete","paylod"],"mappings":"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","sourcesContent":["import { \n    SET_PLANTS, \n    LOADING_DATA, \n    LIKE_PLANT, \n    UNLIKE_PLANT,\n    DELETE_PLANT, \n    SET_ERRORS,\n    POST_PLANT,\n    CLEAR_ERRORS,\n    LOADING_UI\n} from '../types';\nimport axios from 'axios';\n\n// Get all plants\nexport const getPlants = () => dispatch => {\n    dispatch({ type: LOADING_DATA });\n    axios.get('/plants')\n        .then(res => {\n            dispatch({\n                type: SET_PLANTS,\n                payload: res.data\n            })\n        })\n        .catch(err => {\n            dispatch({\n                type: SET_PLANTS,\n                payload: []\n            })\n        })\n};\n// Post a plant\nexport const postPlant = (newPlant) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios.post('/plant', newPlant)\n        .then(res => {\n            dispatch({\n                type: POST_PLANT,\n                payload: res.data\n            });\n            dispatch({ type: CLEAR_ERRORS });\n        })\n        .catch(err => {\n            dispatch({\n                type: SET_ERRORS,\n                payload: err.response.data\n            })\n        })\n}\n\n// Like a plant\nexport const likePlant = (plantId) => dispatch => {\n    axios\n        .get(`/plant/${plantId}/like`)\n        .then(res => {\n            dispatch({\n                type: LIKE_PLANT,\n                payload: res.data\n            })\n        })\n        .catch((err) => console.log(err));\n};\n// Unlike a plant\nexport const unlikePlant = (plantId) => dispatch => {\n    axios\n        .get(`/plant/${plantId}/unlike`)\n        .then(res => {\n            dispatch({\n                type: UNLIKE_PLANT,\n                payload: res.data\n            })\n        })\n        .catch((err) => console.log(err));\n};\n// Delete a plant\nexport const deletePlant = (plantId) => (dispatch) => {\n    axios.delete(`/plant/${plantId}`)\n        .then(() => {\n            dispatch({ type: DELETE_PLANT, paylod: plantId })\n        })\n        .catch((err) => console.log(err));\n}"]},"metadata":{},"sourceType":"module"}