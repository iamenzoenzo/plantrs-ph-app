{"ast":null,"code":"var _jsxFileName = \"/Volumes/extra/is295/plantrs-ph-app/src/pages/user.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport Plant from '../components/plant/Plant';\nimport StaticProfile from '../components/profile/StaticProfile';\nimport Grid from '@material-ui/core/Grid';\nimport PlantSkeleton from '../util/PlantSkeleton'; // Redux\n\nimport { connect } from 'react-redux';\nimport { getUserData } from '../redux/actions/dataActions';\n\nclass user extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      profile: null,\n      plantIdParam: null\n    };\n  }\n\n  componentDidMount() {\n    const handle = this.props.match.params.handle;\n    const plantId = this.props.match.params.plantId;\n    if (plantId) this.setState({\n      plantIdParam: plantId\n    });\n    this.props.getUserData(handle);\n    axios.get(`/user/${handle}`).then(res => {\n      this.setState({\n        profile: res.data.user\n      });\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    const {\n      plants,\n      loading\n    } = this.props.data;\n    const {\n      plantIdParam\n    } = this.state;\n    const plantsMarkup = loading ? /*#__PURE__*/React.createElement(PlantSkeleton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }) : plants === null ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, \"No plants for this user...\") : !plantIdParam ? plants.map(plant => /*#__PURE__*/React.createElement(Plant, {\n      key: plant.plantId,\n      plant: plant,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 33\n      }\n    })) : plants.map(plant => {\n      if (plant.plantId !== plantIdParam) return /*#__PURE__*/React.createElement(Plant, {\n        key: plant.plantId,\n        plant: plant,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 28\n        }\n      });else return /*#__PURE__*/React.createElement(Plant, {\n        key: plant.plantId,\n        plant: plant,\n        openDialog: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 29\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 8,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, plantsMarkup), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      sm: 4,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, this.state.profile === null ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }\n    }, \"Loading profile...\") : /*#__PURE__*/React.createElement(StaticProfile, {\n      profile: this.state.profile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 26\n      }\n    })));\n  }\n\n}\n\nuser.propTypes = {\n  getUserData: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nexport default connect(mapStateToProps, {\n  getUserData\n})(user);","map":{"version":3,"sources":["/Volumes/extra/is295/plantrs-ph-app/src/pages/user.js"],"names":["React","Component","PropTypes","axios","Plant","StaticProfile","Grid","PlantSkeleton","connect","getUserData","user","state","profile","plantIdParam","componentDidMount","handle","props","match","params","plantId","setState","get","then","res","data","catch","err","console","log","render","plants","loading","plantsMarkup","map","plant","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport Plant from '../components/plant/Plant';\nimport StaticProfile from '../components/profile/StaticProfile';\nimport Grid from '@material-ui/core/Grid';\nimport PlantSkeleton from '../util/PlantSkeleton';\n// Redux\nimport { connect } from 'react-redux';\nimport { getUserData } from '../redux/actions/dataActions';\n\nclass user extends Component {\n    state = {\n        profile: null,\n        plantIdParam: null\n    };\n\n    componentDidMount(){\n        const handle = this.props.match.params.handle;\n        const plantId = this.props.match.params.plantId;\n\n        if(plantId) this.setState({ plantIdParam: plantId });\n\n        this.props.getUserData(handle);\n        axios.get(`/user/${handle}`)\n            .then(res => {\n                this.setState({\n                    profile: res.data.user\n                })\n            })\n            .catch(err => console.log(err));\n    }\n    render() {\n        const { plants, loading } = this.props.data;\n        const { plantIdParam } = this.state;\n\n        const plantsMarkup = loading ? (\n            <PlantSkeleton/>\n        ) : plants === null ? (\n            <p>No plants for this user...</p>\n        ) : !plantIdParam ? (\n            plants.map(plant => <Plant key={plant.plantId} plant={plant}/>)\n        ) : (\n            plants.map(plant => {\n                if(plant.plantId !== plantIdParam)\n                    return <Plant key={plant.plantId} plant={plant}/>\n                else return <Plant key={plant.plantId} plant={plant} openDialog/> \n            })\n        )\n\n        return (\n            <Grid container spacing={2}>\n                <Grid item sm={8} xs={12}>\n                    {plantsMarkup}\n                </Grid>\n                <Grid item sm={4} xs={12}>\n                    {this.state.profile === null ? (\n                        <p>Loading profile...</p>\n                    ) : (<StaticProfile profile={this.state.profile} />)}\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\nuser.propTypes = {\n    getUserData: PropTypes.func.isRequired,\n    data: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    data: state.data\n})\n\nexport default connect(mapStateToProps, {getUserData})(user);\n"]},"metadata":{},"sourceType":"module"}