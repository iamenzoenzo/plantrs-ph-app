{"ast":null,"code":"import { SET_PLANTS, LOADING_DATA, LIKE_PLANT, UNLIKE_PLANT, DELETE_PLANT, SET_ERRORS, POST_PLANT, CLEAR_ERRORS, LOADING_UI } from '../types';\nimport axios from 'axios'; // Get all plants\n\nexport const getPlants = () => dispatch => {\n  dispatch({\n    type: LOADING_DATA\n  });\n  axios.get('/plants').then(res => {\n    dispatch({\n      type: SET_PLANTS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: SET_PLANTS,\n      payload: []\n    });\n  });\n}; // Post a plant\n\nexport const postPlant = newPlant => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/plant', newPlant).then(res => {\n    dispatch({\n      type: POST_PLANT,\n      payload: res.data\n    });\n    dispatch(clearErrors());\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Like a plant\n\nexport const likePlant = plantId => dispatch => {\n  axios.get(`/plant/${plantId}/like`).then(res => {\n    dispatch({\n      type: LIKE_PLANT,\n      payload: res.data\n    });\n  }).catch(err => console.log(err));\n}; // Unlike a plant\n\nexport const unlikePlant = plantId => dispatch => {\n  axios.get(`/plant/${plantId}/unlike`).then(res => {\n    dispatch({\n      type: UNLIKE_PLANT,\n      payload: res.data\n    });\n  }).catch(err => console.log(err));\n}; // Delete a plant\n\nexport const deletePlant = plantId => dispatch => {\n  axios.delete(`/plant/${plantId}`).then(() => {\n    dispatch({\n      type: DELETE_PLANT,\n      paylod: plantId\n    });\n  }).catch(err => console.log(err));\n};\nexport const clearErrors = () => dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["/Volumes/extra/is295/plantrs-ph-app/src/redux/actions/dataActions.js"],"names":["SET_PLANTS","LOADING_DATA","LIKE_PLANT","UNLIKE_PLANT","DELETE_PLANT","SET_ERRORS","POST_PLANT","CLEAR_ERRORS","LOADING_UI","axios","getPlants","dispatch","type","get","then","res","payload","data","catch","err","postPlant","newPlant","post","clearErrors","response","likePlant","plantId","console","log","unlikePlant","deletePlant","delete","paylod"],"mappings":"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","sourcesContent":["import { \n    SET_PLANTS, \n    LOADING_DATA, \n    LIKE_PLANT, \n    UNLIKE_PLANT,\n    DELETE_PLANT, \n    SET_ERRORS,\n    POST_PLANT,\n    CLEAR_ERRORS,\n    LOADING_UI\n} from '../types';\nimport axios from 'axios';\n\n// Get all plants\nexport const getPlants = () => dispatch => {\n    dispatch({ type: LOADING_DATA });\n    axios.get('/plants')\n        .then(res => {\n            dispatch({\n                type: SET_PLANTS,\n                payload: res.data\n            })\n        })\n        .catch(err => {\n            dispatch({\n                type: SET_PLANTS,\n                payload: []\n            })\n        })\n};\n// Post a plant\nexport const postPlant = (newPlant) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios\n        .post('/plant', newPlant)\n        .then((res) => {\n            dispatch({\n                type: POST_PLANT,\n                payload: res.data\n            });\n            dispatch(clearErrors());\n        })\n        .catch(err => {\n            dispatch({\n                type: SET_ERRORS,\n                payload: err.response.data\n            })\n        })\n}\n\n// Like a plant\nexport const likePlant = (plantId) => dispatch => {\n    axios\n        .get(`/plant/${plantId}/like`)\n        .then(res => {\n            dispatch({\n                type: LIKE_PLANT,\n                payload: res.data\n            })\n        })\n        .catch((err) => console.log(err));\n};\n// Unlike a plant\nexport const unlikePlant = (plantId) => dispatch => {\n    axios\n        .get(`/plant/${plantId}/unlike`)\n        .then(res => {\n            dispatch({\n                type: UNLIKE_PLANT,\n                payload: res.data\n            })\n        })\n        .catch((err) => console.log(err));\n};\n// Delete a plant\nexport const deletePlant = (plantId) => (dispatch) => {\n    axios.delete(`/plant/${plantId}`)\n        .then(() => {\n            dispatch({ type: DELETE_PLANT, paylod: plantId })\n        })\n        .catch((err) => console.log(err));\n}\n\nexport const clearErrors = () => (dispatch) => {\n    dispatch({ type: CLEAR_ERRORS });\n  };"]},"metadata":{},"sourceType":"module"}