{"ast":null,"code":"import _defineProperty from\"/Volumes/External/MasterGithub/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/Volumes/External/MasterGithub/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Volumes/External/MasterGithub/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Volumes/External/MasterGithub/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Volumes/External/MasterGithub/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _objectSpread from\"/Volumes/External/MasterGithub/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{Component,Fragment}from'react';import withStyles from'@material-ui/core/styles/withStyles';import MyButton from'../../util/MyButton';// MUI stuff\nimport Button from'@material-ui/core/Button';import TextField from'@material-ui/core/TextField';import Dialog from'@material-ui/core/Dialog';import DialogContent from'@material-ui/core/DialogContent';import DialogTitle from'@material-ui/core/DialogTitle';import CircularProgress from'@material-ui/core/CircularProgress';// Redux stuff\nimport{connect}from'react-redux';import{postPlant,clearErrors}from'../../redux/actions/dataActions';// Icons\nimport AddIcon from'@material-ui/icons/Add';import CloseIcon from'@material-ui/icons/Close';var styles=function styles(theme){return _objectSpread(_objectSpread({},theme.spreadThis),{},{submitButton:{position:'relative',float:'right',marginTop:10},progressSpinner:{position:'absolute'},closeButton:{position:'absolute',left:'88%',top:'0%'}});};var PostPlant=/*#__PURE__*/function(_Component){_inherits(PostPlant,_Component);var _super=_createSuper(PostPlant);function PostPlant(){var _this;_classCallCheck(this,PostPlant);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={open:false,plantName:'',phylum:'',klass:'',urder:'',family:'',genus:'',species:'',caption:'',errors:{}};_this.handleOpen=function(){_this.setState({open:true});};_this.handleClose=function(){_this.props.clearErrors();_this.setState({open:false,errors:{}});};_this.handleChange=function(event){_this.setState(_defineProperty({},event.target.name,event.target.value));};_this.handleSubmit=function(){var plantDetails={plantName:_this.state.plantName,phylum:_this.state.phylum,klass:_this.state.klass,urder:_this.state.urder,family:_this.state.family,genus:_this.state.genus,species:_this.state.species,plantImg:'https://firebasestorage.googleapis.com/v0/b/plantrs-ph.appspot.com/o/no-plant-img.png?alt=media',caption:_this.state.caption};_this.props.postPlant(plantDetails);_this.handleClose();};return _this;}_createClass(PostPlant,[{key:\"componentWillReceiveProps\",/* static getDerivedStateFromProps(props) {\n        if (props.UI.errors) {\n          return {\n            errors: props.UI.errors\n          }\n        }\n        return null;\n    }; */value:function componentWillReceiveProps(nextProps){if(nextProps.UI.errors){this.setState({errors:nextProps.UI.errors});}if(!nextProps.UI.errors&&!nextProps.UI.loading){this.setState({plantName:'',open:false,errors:{}});this.setState({caption:'',open:false,errors:{}});}}},{key:\"render\",value:function render(){var errors=this.state.errors;var _this$props=this.props,classes=_this$props.classes,loading=_this$props.UI.loading;return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(MyButton,{onClick:this.handleOpen,tip:\"Post a Plant!\"},/*#__PURE__*/React.createElement(AddIcon,null)),/*#__PURE__*/React.createElement(Dialog,{open:this.state.open,onClose:this.handleClose,fullWidth:true,maxWidth:\"sm\"},/*#__PURE__*/React.createElement(MyButton,{tip:\"Close\",onClick:this.handleClose,tipClassName:classes.closeButton},/*#__PURE__*/React.createElement(CloseIcon,null)),/*#__PURE__*/React.createElement(DialogTitle,null,\"Post a new plant\"),/*#__PURE__*/React.createElement(DialogContent,null,/*#__PURE__*/React.createElement(\"form\",{onSubmit:this.handleSubmit},/*#__PURE__*/React.createElement(TextField,{name:\"plantName\",type:\"text\",label:\"PLANT\",placeholder:\"Name of your plant\",error:errors.plantName?true:false,helperText:errors.plantName,className:classes.textField,onChange:this.handleChange,fullWidth:true}),/*#__PURE__*/React.createElement(TextField,{name:\"phylum\",type:\"text\",label:\"PHYLUM\",placeholder:\"Name of your plant\",error:errors.phylum?true:false,helperText:errors.phylum,className:classes.textField,onChange:this.handleChange,fullWidth:true}),/*#__PURE__*/React.createElement(TextField,{name:\"klass\",type:\"text\",label:\"CLASS\",placeholder:\"Name of your plant\",error:errors.klass?true:false,helperText:errors.klass,className:classes.textField,onChange:this.handleChange,fullWidth:true}),/*#__PURE__*/React.createElement(TextField,{name:\"urder\",type:\"text\",label:\"ORDER\",placeholder:\"Name of your plant\",error:errors.urder?true:false,helperText:errors.urder,className:classes.textField,onChange:this.handleChange,fullWidth:true}),/*#__PURE__*/React.createElement(TextField,{name:\"family\",type:\"text\",label:\"FAMILY\",placeholder:\"Name of your plant\",error:errors.family?true:false,helperText:errors.family,className:classes.textField,onChange:this.handleChange,fullWidth:true}),/*#__PURE__*/React.createElement(TextField,{name:\"genus\",type:\"text\",label:\"GENUS\",placeholder:\"Name of your plant\",error:errors.genus?true:false,helperText:errors.genus,className:classes.textField,onChange:this.handleChange,fullWidth:true}),/*#__PURE__*/React.createElement(TextField,{name:\"species\",type:\"text\",label:\"SPECIES\",placeholder:\"Name of your plant\",error:errors.species?true:false,helperText:errors.species,className:classes.textField,onChange:this.handleChange,fullWidth:true}),/*#__PURE__*/React.createElement(TextField,{name:\"caption\",type:\"text\",label:\"DESCRIPTION\",multiline:true,rows:\"3\",placeholder:\"Describe your plant\",error:errors.caption?true:false,helperText:errors.caption,className:classes.textField,onChange:this.handleChange,fullWidth:true}),/*#__PURE__*/React.createElement(Button,{onClick:this.handleSubmit,type:\"submit\",variant:\"contained\",color:\"primary\",className:classes.submitButton,disabled:loading},\"Submit\",loading&&/*#__PURE__*/React.createElement(CircularProgress,{size:20,className:classes.progressSpinner}))))));}}]);return PostPlant;}(Component);var mapStateToProps=function mapStateToProps(state){return{UI:state.UI};};export default connect(mapStateToProps,{postPlant:postPlant,clearErrors:clearErrors})(withStyles(styles)(PostPlant));","map":{"version":3,"sources":["/Volumes/External/MasterGithub/plantrs-ph-app/src/components/plant/PostPlant.js"],"names":["React","Component","Fragment","withStyles","MyButton","Button","TextField","Dialog","DialogContent","DialogTitle","CircularProgress","connect","postPlant","clearErrors","AddIcon","CloseIcon","styles","theme","spreadThis","submitButton","position","float","marginTop","progressSpinner","closeButton","left","top","PostPlant","state","open","plantName","phylum","klass","urder","family","genus","species","caption","errors","handleOpen","setState","handleClose","props","handleChange","event","target","name","value","handleSubmit","plantDetails","plantImg","nextProps","UI","loading","classes","textField","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../../util/MyButton';\n\n// MUI stuff\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// Redux stuff\nimport { connect } from 'react-redux';\nimport { postPlant, clearErrors } from '../../redux/actions/dataActions';\n\n// Icons\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst styles = (theme) => ({\n    ...theme.spreadThis,\n    submitButton:{\n        position: 'relative',\n        float: 'right',\n        marginTop: 10\n    },\n    progressSpinner:{\n        position: 'absolute'\n    },\n    closeButton:{\n        position: 'absolute',\n        left: '88%',\n        top: '0%'\n    }\n})\n\nclass PostPlant extends Component{\n    state = {\n        open: false,\n        plantName: '',\n        phylum: '',\n        klass: '',\n        urder: '',\n        family: '',\n        genus: '',\n        species: '',\n        caption: '',\n        errors: {}\n    };\n    /* static getDerivedStateFromProps(props) {\n        if (props.UI.errors) {\n          return {\n            errors: props.UI.errors\n          }\n        }\n        return null;\n    }; */\n    componentWillReceiveProps(nextProps){\n        if(nextProps.UI.errors){\n            this.setState({\n                errors: nextProps.UI.errors\n            });\n        }\n        if (!nextProps.UI.errors && !nextProps.UI.loading) {\n            this.setState({ plantName: '', open: false, errors: {} });\n            this.setState({ caption: '', open: false, errors: {} });\n        }\n    }\n    handleOpen = () => {\n        this.setState({ open: true })\n    };\n    handleClose = () => {\n        this.props.clearErrors();\n        this.setState({ open: false, errors: {} });\n    };\n    handleChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value})\n    };\n    /* handleSubmit =(event) => {\n        event.preventDefault();\n        this.props.postPlant({ plantName: this.state.plantName });\n\n    }; */\n    handleSubmit = () => {\n        const plantDetails = {\n            plantName: this.state.plantName,\n            phylum: this.state.phylum,\n            klass: this.state.klass,\n            urder: this.state.urder,\n            family: this.state.family,\n            genus: this.state.genus,\n            species: this.state.species,\n            plantImg: 'https://firebasestorage.googleapis.com/v0/b/plantrs-ph.appspot.com/o/no-plant-img.png?alt=media',\n            caption: this.state.caption\n        };\n        this.props.postPlant(plantDetails);\n        this.handleClose();\n    };\n    render(){\n        const { errors } = this.state;\n        const { classes, UI: { loading }} = this.props;\n        return (\n            <Fragment>\n                <MyButton onClick={this.handleOpen} tip=\"Post a Plant!\">\n                    <AddIcon/>\n                </MyButton>\n                <Dialog open={this.state.open} onClose={this.handleClose} fullWidth maxWidth=\"sm\">\n                    <MyButton tip=\"Close\" onClick={this.handleClose} tipClassName={classes.closeButton}>\n                        <CloseIcon/>\n                    </MyButton>\n                    <DialogTitle>Post a new plant</DialogTitle>\n                    <DialogContent>\n                        <form onSubmit={this.handleSubmit}>\n                            <TextField\n                                name=\"plantName\"\n                                type=\"text\"\n                                label=\"PLANT\"\n                                placeholder=\"Name of your plant\"\n                                error={errors.plantName ? true : false}\n                                helperText={errors.plantName}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            <TextField\n                                name=\"phylum\"\n                                type=\"text\"\n                                label=\"PHYLUM\"\n                                placeholder=\"Name of your plant\"\n                                error={errors.phylum ? true : false}\n                                helperText={errors.phylum}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            <TextField\n                                name=\"klass\"\n                                type=\"text\"\n                                label=\"CLASS\"\n                                placeholder=\"Name of your plant\"\n                                error={errors.klass ? true : false}\n                                helperText={errors.klass}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            <TextField\n                                name=\"urder\"\n                                type=\"text\"\n                                label=\"ORDER\"\n                                placeholder=\"Name of your plant\"\n                                error={errors.urder ? true : false}\n                                helperText={errors.urder}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            <TextField\n                                name=\"family\"\n                                type=\"text\"\n                                label=\"FAMILY\"\n                                placeholder=\"Name of your plant\"\n                                error={errors.family ? true : false}\n                                helperText={errors.family}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            <TextField\n                                name=\"genus\"\n                                type=\"text\"\n                                label=\"GENUS\"\n                                placeholder=\"Name of your plant\"\n                                error={errors.genus ? true : false}\n                                helperText={errors.genus}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            <TextField\n                                name=\"species\"\n                                type=\"text\"\n                                label=\"SPECIES\"\n                                placeholder=\"Name of your plant\"\n                                error={errors.species ? true : false}\n                                helperText={errors.species}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            \n                            <TextField\n                                name=\"caption\"\n                                type=\"text\"\n                                label=\"DESCRIPTION\"\n                                multiline\n                                rows=\"3\"\n                                placeholder=\"Describe your plant\"\n                                error={errors.caption ? true : false}\n                                helperText={errors.caption}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                                <Button onClick={this.handleSubmit}  type=\"submit\" variant=\"contained\" color=\"primary\"\n                                    className={classes.submitButton} disabled={loading}>\n                                        Submit\n                                        {loading && (\n                                            <CircularProgress size={20} className={classes.progressSpinner}/>\n                                        )}\n                                    </Button>\n                        </form>\n                    </DialogContent>\n                </Dialog>\n            </Fragment>\n        )\n    }\n}\n\nPostPlant.propTypes = {\n    postPlant: PropTypes.func.isRequired,\n    clearErrors: PropTypes.func.isRequired,\n    UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    UI: state.UI\n})\n\nexport default connect(\n    mapStateToProps, \n    { postPlant, clearErrors }\n)(withStyles(styles)(PostPlant));"]},"metadata":{},"sourceType":"module"}