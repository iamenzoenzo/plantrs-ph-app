{"ast":null,"code":"var _jsxFileName = \"/Volumes/External/MasterGithub/plantrs-ph-app/src/components/plant/Plant.js\";\nimport React, { Component } from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport PropTypes from 'prop-types';\nimport MyButton from '../../util/MyButton';\nimport DeletePlant from './DeletePlant';\nimport PlantDialog from './PlantDialog';\nimport LikeButton from './LikeButton'; // Material UIs\n\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport { lightGreen } from '@material-ui/core/colors'; // Icons\n\nimport ChatIcon from '@material-ui/icons/Chat'; // Redux stuff\n\nimport { connect } from 'react-redux';\nconst styles = {\n  card: {\n    position: 'relative',\n    marginBottom: 20\n  },\n  content: {\n    padding: 20,\n    objectFit: 'cover',\n    minWidth: 400\n  },\n  media: {\n    maxWidth: '100%',\n    height: 300,\n    paddingTop: '0%' // 16:9\n\n  },\n  avatar: {\n    backgroundColor: lightGreen[500]\n  },\n  collab: {\n    fontSize: 13\n  }\n};\n\nclass Plant extends Component {\n  render() {\n    dayjs.extend(relativeTime);\n    const {\n      classes,\n      plant: {\n        caption,\n        createDate,\n        userImage,\n        userHandle,\n        plantId,\n        plantName,\n        plantImg,\n        likeCount,\n        commentCount\n      },\n      user: {\n        authenticated,\n        credentials: {\n          handle\n        } // TO DO replace with { handle, role }\n\n      }\n    } = this.props;\n    const deleteButton = authenticated && userHandle === handle ?\n    /*#__PURE__*/\n    // TODO include OR for role = moderator\n    React.createElement(DeletePlant, {\n      plantId: plantId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }) : null;\n    return /*#__PURE__*/React.createElement(Card, {\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CardContent, {\n      className: classes.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      alt: userHandle,\n      src: userImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }), deleteButton, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      component: Link,\n      to: `/users/${userHandle}`,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }, userHandle), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      component: \"p\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }, dayjs(createDate).fromNow())), /*#__PURE__*/React.createElement(CardMedia, {\n      className: classes.media,\n      image: plantImg,\n      title: plantName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(CardContent, {\n      className: classes.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, plantName), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      component: \"p\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, caption), /*#__PURE__*/React.createElement(LikeButton, {\n      plantId: plantId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: classes.collab,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    }, likeCount, \" Likes\"), /*#__PURE__*/React.createElement(MyButton, {\n      tip: \"Comments\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ChatIcon, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      className: classes.collab,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }, commentCount, \" Comments\"), /*#__PURE__*/React.createElement(PlantDialog, {\n      plantId: plantId,\n      userHandle: userHandle,\n      openDialog: this.props.openDialog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nPlant.propTypes = {\n  user: PropTypes.object.isRequired,\n  plant: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n  openDialog: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  user: state.user\n});\n\nexport default connect(mapStateToProps)(withStyles(styles)(Plant));","map":{"version":3,"sources":["/Volumes/External/MasterGithub/plantrs-ph-app/src/components/plant/Plant.js"],"names":["React","Component","withStyles","Link","dayjs","relativeTime","PropTypes","MyButton","DeletePlant","PlantDialog","LikeButton","Card","CardMedia","CardContent","Avatar","Typography","lightGreen","ChatIcon","connect","styles","card","position","marginBottom","content","padding","objectFit","minWidth","media","maxWidth","height","paddingTop","avatar","backgroundColor","collab","fontSize","Plant","render","extend","classes","plant","caption","createDate","userImage","userHandle","plantId","plantName","plantImg","likeCount","commentCount","user","authenticated","credentials","handle","props","deleteButton","fromNow","openDialog","propTypes","object","isRequired","bool","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport PropTypes from 'prop-types';\nimport MyButton from '../../util/MyButton';\nimport DeletePlant from './DeletePlant';\nimport PlantDialog from './PlantDialog';\nimport LikeButton from './LikeButton';\n// Material UIs\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport { lightGreen } from '@material-ui/core/colors';\n\n// Icons\nimport ChatIcon from '@material-ui/icons/Chat';\n\n\n// Redux stuff\nimport { connect } from 'react-redux';\n\n\n\nconst styles = {\n    card: {\n        position: 'relative',\n        marginBottom: 20,\n    },\n    content: {\n        padding: 20,\n        objectFit: 'cover',\n        minWidth: 400,\n    },\n    media: {\n        maxWidth: '100%',\n        height: 300,\n        paddingTop: '0%', // 16:9\n    },\n    avatar: {\n        backgroundColor: lightGreen[500],\n    },\n    collab: {\n        fontSize: 13\n    }\n}\n\nclass Plant extends Component {\n    \n    render() {\n        dayjs.extend(relativeTime)\n        const { \n                classes, \n                plant : { \n                    caption, \n                    createDate, \n                    userImage, \n                    userHandle, \n                    plantId, \n                    plantName, \n                    plantImg, \n                    likeCount, \n                    commentCount \n                },\n                user: {\n                    authenticated, credentials: { handle } // TO DO replace with { handle, role }\n                } \n            } = this.props;\n        \n        const deleteButton = \n        authenticated && userHandle === handle ? ( // TODO include OR for role = moderator\n            <DeletePlant plantId={plantId} />\n        ) : null;\n        return (\n            <Card className={classes.card}>\n                <CardContent className={classes.content}>\n                    <Avatar alt={userHandle} src={userImage} />\n                    {deleteButton}\n                    <Typography\n                         variant=\"body2\" \n                         component={Link} \n                         to={`/users/${userHandle}`} \n                         color=\"primary\">{userHandle}\n                    </Typography>\n                    \n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{dayjs(createDate).fromNow()}</Typography>\n                </CardContent>\n                <CardMedia className={classes.media} image={plantImg} title={plantName} />\n                \n                <CardContent className={classes.content}>\n                    \n                    <Typography variant=\"h5\">{plantName}</Typography>\n                    \n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{caption}</Typography>\n\n                    <LikeButton plantId={plantId}/>\n                    <span className={classes.collab}>{likeCount} Likes</span>\n                    <MyButton tip=\"Comments\">\n                        <ChatIcon color=\"primary\"/>\n                    </MyButton>\n                    <span className={classes.collab}>{commentCount} Comments</span>\n                    <PlantDialog plantId={plantId} userHandle={userHandle} openDialog={this.props.openDialog}/>\n                </CardContent>\n\n            </Card>\n        );\n    }\n}\n\nPlant.propTypes = {\n    user: PropTypes.object.isRequired,\n    plant: PropTypes.object.isRequired,\n    classes: PropTypes.object.isRequired,\n    openDialog: PropTypes.bool\n}\n\nconst mapStateToProps = state => ({\n    user: state.user\n})\n\n\nexport default connect(\n    mapStateToProps\n    )(withStyles(styles)(Plant));\n"]},"metadata":{},"sourceType":"module"}