{"ast":null,"code":"import _classCallCheck from\"/Volumes/External/MasterGithub/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Volumes/External/MasterGithub/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Volumes/External/MasterGithub/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Volumes/External/MasterGithub/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _objectSpread from\"/Volumes/External/MasterGithub/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{Component,Fragment}from'react';import withStyles from'@material-ui/core/styles/withStyles';import MyButton from'../../util/MyButton';import dayjs from'dayjs';import LikeButton from'./LikeButton';import Comments from'./Comments';import CommentForm from'./CommentForm';import{Link}from'react-router-dom';// MUI \nimport Dialog from'@material-ui/core/Dialog';import DialogContent from'@material-ui/core/DialogContent';import DialogTitle from'@material-ui/core/DialogTitle';import CircularProgress from'@material-ui/core/CircularProgress';import Grid from'@material-ui/core/Grid';import Typography from'@material-ui/core/Typography';// Icons\nimport CloseIcon from'@material-ui/icons/Close';import UnfoldMore from'@material-ui/icons/UnfoldMore';import ChatIcon from'@material-ui/icons/Chat';// Redux stuff\nimport{connect}from'react-redux';import{getPlant,clearErrors}from'../../redux/actions/dataActions';var styles=function styles(theme){return _objectSpread(_objectSpread({},theme.spreadThis),{},{profileImage:{maxWidth:50,height:50,borderRadius:'50%',objectFit:'cover'},plantImage:{maxWidth:'100%',height:300,borderRadius:'5%',objectFit:'cover'},dialogContent:{padding:20},closeButton:{position:'absolute',right:'0%'},expandButton:{position:'absolute',right:'0%'},spinnerDiv:{textAlign:'center',marginTop:50,marginBottom:50},collab:{fontSize:13}});};var PlantDialog=/*#__PURE__*/function(_Component){_inherits(PlantDialog,_Component);var _super=_createSuper(PlantDialog);function PlantDialog(){var _this;_classCallCheck(this,PlantDialog);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={open:false,oldPath:'',newPath:''};_this.handleOpen=function(){var oldPath=window.location.pathname;var _this$props=_this.props,userHandle=_this$props.userHandle,plantId=_this$props.plantId;var newPath=\"/users/\".concat(userHandle,\"/plant/\").concat(plantId);if(oldPath===newPath)oldPath=\"/users/\".concat(userHandle);window.history.pushState(null,null,newPath);_this.setState({open:true,oldPath:oldPath,newPath:newPath});_this.props.getPlant(_this.props.plantId);};_this.handleClose=function(){window.history.pushState(null,null,_this.state.oldPath);_this.setState({open:false});_this.props.clearErrors();};return _this;}_createClass(PlantDialog,[{key:\"componentDidMount\",value:function componentDidMount(){if(this.props.openDialog){this.handleOpen();}}},{key:\"render\",value:function render(){var _this$props2=this.props,classes=_this$props2.classes,_this$props2$plant=_this$props2.plant,plantId=_this$props2$plant.plantId,plantName=_this$props2$plant.plantName,createDate=_this$props2$plant.createDate,kingdom=_this$props2$plant.kingdom,phylum=_this$props2$plant.phylum,klass=_this$props2$plant.klass,family=_this$props2$plant.family,urder=_this$props2$plant.urder,genus=_this$props2$plant.genus,species=_this$props2$plant.species,plantImg=_this$props2$plant.plantImg,caption=_this$props2$plant.caption,userHandle=_this$props2$plant.userHandle,userImage=_this$props2$plant.userImage,likeCount=_this$props2$plant.likeCount,commentCount=_this$props2$plant.commentCount,comments=_this$props2$plant.comments,loading=_this$props2.UI.loading;var dialogMarkup=loading?/*#__PURE__*/React.createElement(\"div\",{className:classes.spinnerDiv},/*#__PURE__*/React.createElement(CircularProgress,{size:150,thickness:2})):/*#__PURE__*/React.createElement(Grid,{container:true,spacing:2},/*#__PURE__*/React.createElement(Grid,{item:true,sm:12},/*#__PURE__*/React.createElement(\"img\",{src:plantImg,alt:plantName,className:classes.plantImage})),/*#__PURE__*/React.createElement(Grid,{item:true,sm:12},/*#__PURE__*/React.createElement(\"hr\",{className:classes.invisibleSeparator}),/*#__PURE__*/React.createElement(Typography,{variant:\"h5\"},plantName),/*#__PURE__*/React.createElement(Typography,{variant:\"body1\"},caption),/*#__PURE__*/React.createElement(\"hr\",{className:classes.visibleSeparator}),/*#__PURE__*/React.createElement(Typography,{variant:\"body2\"},/*#__PURE__*/React.createElement(\"strong\",null,\"Scientific Classification\")),/*#__PURE__*/React.createElement(Typography,{variant:\"body2\"},\"Kingdom: \",kingdom),/*#__PURE__*/React.createElement(Typography,{variant:\"body2\"},\"Phylum: \",phylum),/*#__PURE__*/React.createElement(Typography,{variant:\"body2\"},\"Class: \",klass),/*#__PURE__*/React.createElement(Typography,{variant:\"body2\"},\"Family: \",family),/*#__PURE__*/React.createElement(Typography,{variant:\"body2\"},\"Order: \",urder),/*#__PURE__*/React.createElement(Typography,{variant:\"body2\"},\"Genus: \",genus),/*#__PURE__*/React.createElement(Typography,{variant:\"body2\"},\"Species: \",species),/*#__PURE__*/React.createElement(\"hr\",{className:classes.visibleSeparator}),/*#__PURE__*/React.createElement(LikeButton,{plantId:plantId}),/*#__PURE__*/React.createElement(\"span\",{className:classes.collab},likeCount,\" Likes\"),/*#__PURE__*/React.createElement(MyButton,{tip:\"Comments\"},/*#__PURE__*/React.createElement(ChatIcon,{color:\"primary\"})),/*#__PURE__*/React.createElement(\"span\",{className:classes.collab},commentCount,\" Comments\")),/*#__PURE__*/React.createElement(CommentForm,{plantId:plantId}),/*#__PURE__*/React.createElement(Comments,{comments:comments}));return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(MyButton,{onClick:this.handleOpen,tip:\"Expand plant\",tipClassName:classes.expandButton},/*#__PURE__*/React.createElement(UnfoldMore,{color:\"primary\"})),/*#__PURE__*/React.createElement(Dialog,{open:this.state.open,onClose:this.handleClose,fullWidth:true,maxWidth:\"sm\"},/*#__PURE__*/React.createElement(MyButton,{tip:\"Close\",onClick:this.handleClose,tipClassName:classes.closeButton},/*#__PURE__*/React.createElement(CloseIcon,null)),/*#__PURE__*/React.createElement(DialogTitle,null,/*#__PURE__*/React.createElement(\"img\",{src:userImage,alt:userHandle,className:classes.profileImage}),/*#__PURE__*/React.createElement(Typography,{component:Link,color:\"primary\",variant:\"h5\",to:\"/users/\".concat(userHandle)},\"@\",userHandle),/*#__PURE__*/React.createElement(\"hr\",{className:classes.invisibleSeparator}),/*#__PURE__*/React.createElement(Typography,{variant:\"body2\",color:\"textSecondary\"},dayjs(createDate).fromNow())),/*#__PURE__*/React.createElement(DialogContent,{className:classes.dialogContent},dialogMarkup)));}}]);return PlantDialog;}(Component);;var mapStateToProps=function mapStateToProps(state){return{plant:state.data.plant,UI:state.UI};};var mapActionsToProps={getPlant:getPlant,clearErrors:clearErrors};export default connect(mapStateToProps,mapActionsToProps)(withStyles(styles)(PlantDialog));","map":{"version":3,"sources":["/Volumes/External/MasterGithub/plantrs-ph-app/src/components/plant/PlantDialog.js"],"names":["React","Component","Fragment","withStyles","MyButton","dayjs","LikeButton","Comments","CommentForm","Link","Dialog","DialogContent","DialogTitle","CircularProgress","Grid","Typography","CloseIcon","UnfoldMore","ChatIcon","connect","getPlant","clearErrors","styles","theme","spreadThis","profileImage","maxWidth","height","borderRadius","objectFit","plantImage","dialogContent","padding","closeButton","position","right","expandButton","spinnerDiv","textAlign","marginTop","marginBottom","collab","fontSize","PlantDialog","state","open","oldPath","newPath","handleOpen","window","location","pathname","props","userHandle","plantId","history","pushState","setState","handleClose","openDialog","classes","plant","plantName","createDate","kingdom","phylum","klass","family","urder","genus","species","plantImg","caption","userImage","likeCount","commentCount","comments","loading","UI","dialogMarkup","invisibleSeparator","visibleSeparator","fromNow","mapStateToProps","data","mapActionsToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../../util/MyButton';\nimport dayjs from 'dayjs';\nimport LikeButton from './LikeButton';\nimport Comments from './Comments';\nimport CommentForm from './CommentForm';\nimport { Link } from 'react-router-dom';\n// MUI \nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n// Icons\nimport CloseIcon from '@material-ui/icons/Close';\nimport UnfoldMore from '@material-ui/icons/UnfoldMore';\nimport ChatIcon from '@material-ui/icons/Chat';\n// Redux stuff\nimport { connect } from 'react-redux';\nimport { getPlant, clearErrors } from '../../redux/actions/dataActions';\n\n\nconst styles = (theme) => ({\n    ...theme.spreadThis,\n    profileImage: {\n        maxWidth: 50,\n        height: 50,\n        borderRadius: '50%',\n        objectFit: 'cover'\n    },\n    plantImage: {\n        maxWidth: '100%',\n        height: 300,\n        borderRadius: '5%',\n        objectFit: 'cover'\n    },\n    dialogContent: {\n        padding: 20\n    },\n    closeButton: {\n        position: 'absolute',\n        right: '0%'\n    },\n    expandButton: {\n        position: 'absolute',\n        right: '0%'\n    },\n    spinnerDiv: {\n        textAlign: 'center',\n        marginTop: 50,\n        marginBottom: 50\n    },\n    collab: {\n        fontSize: 13\n    }\n})\n\nclass PlantDialog extends Component{\n    state = {\n        open: false,\n        oldPath: '',\n        newPath: ''\n    };\n    componentDidMount(){\n        if(this.props.openDialog){\n            this.handleOpen();\n        }\n    };\n    handleOpen = () => {\n        let oldPath = window.location.pathname;\n\n        const { userHandle, plantId } = this.props;\n        const newPath = `/users/${userHandle}/plant/${plantId}`;\n\n        if (oldPath === newPath) oldPath = `/users/${userHandle}`;\n\n        window.history.pushState(null, null, newPath);\n\n        this.setState({ open: true, oldPath, newPath });\n        this.props.getPlant(this.props.plantId);\n    };\n    handleClose = () => {\n        window.history.pushState(null, null, this.state.oldPath);\n        this.setState({ open: false });\n        this.props.clearErrors();\n    };\n    render(){\n        const { \n            classes, \n            plant: { \n                plantId, \n                plantName, \n                createDate,\n                kingdom, \n                phylum, \n                klass, \n                family, \n                urder, \n                genus, \n                species, \n                plantImg, \n                caption, \n                userHandle, \n                userImage, \n                likeCount, \n                commentCount,\n                comments \n            }, \n            UI: { loading } \n        } = this.props;\n\n        const dialogMarkup = loading ? (\n            <div className={classes.spinnerDiv} >\n                <CircularProgress size={150} thickness={2} />\n            </div>\n        ) : (\n            <Grid container spacing={2}>\n                <Grid item sm={12}>\n                    <img src={plantImg} alt={plantName} className={classes.plantImage}/>\n                </Grid>\n                <Grid item sm={12}>\n                    <hr className={classes.invisibleSeparator}/>\n                    <Typography variant=\"h5\">\n                        {plantName}\n                    </Typography>\n                    <Typography variant=\"body1\">\n                        {caption}\n                    </Typography>\n                    <hr className={classes.visibleSeparator}/>\n                    <Typography variant=\"body2\">\n                        <strong>Scientific Classification</strong>\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        Kingdom: {kingdom}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        Phylum: {phylum}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        Class: {klass}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        Family: {family}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        Order: {urder}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        Genus: {genus}\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        Species: {species}\n                    </Typography>\n                    <hr className={classes.visibleSeparator}/>\n                    <LikeButton plantId={plantId}/>\n                    <span className={classes.collab}>{likeCount} Likes</span>\n                    <MyButton tip=\"Comments\">\n                        <ChatIcon color=\"primary\"/>\n                    </MyButton>\n                    <span className={classes.collab}>{commentCount} Comments</span>\n                </Grid>\n                <CommentForm plantId={plantId} />\n                <Comments comments={comments}/>\n            </Grid>\n        )\n\n        return (\n            <Fragment>\n                <MyButton onClick={this.handleOpen} tip=\"Expand plant\" tipClassName={classes.expandButton}>\n                    <UnfoldMore color=\"primary\"/>\n                </MyButton>\n                <Dialog\n                open={this.state.open}\n                onClose={this.handleClose}\n                fullWidth\n                maxWidth=\"sm\"\n                >\n                    <MyButton\n                        tip=\"Close\"\n                        onClick={this.handleClose}\n                        tipClassName={classes.closeButton}\n                    >\n                        <CloseIcon/>\n                    </MyButton>\n                    <DialogTitle >\n                    <img src={userImage} alt={userHandle} className={classes.profileImage}/>\n                        <Typography\n                            component={Link}\n                            color=\"primary\"\n                            variant=\"h5\"\n                            to={`/users/${userHandle}`}\n                        >\n                            @{userHandle}\n                        </Typography>\n                        <hr className={classes.invisibleSeparator}/>\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                            {dayjs(createDate).fromNow()}\n                        </Typography>\n                    </DialogTitle>\n                    \n                    <DialogContent className={classes.dialogContent}>\n                        {dialogMarkup}\n                    </DialogContent>\n                </Dialog>\n            </Fragment>\n\n        )\n    }\n\n};\n\nPlantDialog.propTypes = {\n    clearErrors: PropTypes.func.isRequired,\n    getPlant: PropTypes.func.isRequired,\n    plantId: PropTypes.string.isRequired,\n    userHandle: PropTypes.string.isRequired,\n    plant: PropTypes.object.isRequired,\n    UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    plant: state.data.plant,\n    UI: state.UI\n});\n\nconst mapActionsToProps = {\n    getPlant,\n    clearErrors\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(withStyles(styles)(PlantDialog))"]},"metadata":{},"sourceType":"module"}