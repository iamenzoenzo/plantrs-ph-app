{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Volumes/extra/is295/plantrs-ph-app/src/components/PostPlant.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../util/MyButton'; // Redux stuff\n\nimport { connect } from 'react-redux';\nimport { postPlant } from '../redux/actions/dataActions'; // MUI stuff\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress'; // Icons\n\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst styles = theme => ({ ...theme.spreadThis,\n  submitButton: {\n    position: 'relative'\n  },\n  progressSpinner: {\n    position: 'absolute'\n  },\n  closeButton: {\n    position: 'absolute',\n    left: '90%',\n    top: '2%'\n  }\n});\n\nclass PostPlant extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false,\n      plantName: '',\n      phylum: '',\n      klass: '',\n      urder: '',\n      family: '',\n      genus: '',\n      species: '',\n      caption: '',\n      errors: {}\n    };\n\n    this.handleOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.props.postPlant({\n        plantName: this.state.plantName\n      });\n      this.props.postPlant({\n        caption: this.state.caption\n      });\n    };\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    const {\n      classes,\n      UI: {\n        loading\n      }\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MyButton, {\n        onClick: this.handleOpen,\n        tip: \"Post a Plant!\",\n        children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: this.state.open,\n        onClose: this.handleClose,\n        fullWidth: true,\n        maxWidth: \"sm\",\n        children: [/*#__PURE__*/_jsxDEV(MyButton, {\n          tip: \"Close\",\n          onClick: this.handleClose,\n          tipClassName: classes.closeButton,\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"Post a new plant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              name: \"plantName\",\n              type: \"text\",\n              label: \"PLANT\",\n              placeholder: \"Name of your plant\",\n              error: errors.plantName ? true : false,\n              helperText: errors.plantName,\n              className: classes.textField,\n              onChange: this.handleChange,\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"caption\",\n              type: \"text\",\n              label: \"DESCRIPTION\",\n              multiline: true,\n              rows: \"3\",\n              placeholder: \"Describe your plant\",\n              error: errors.caption ? true : false,\n              helperText: errors.caption,\n              className: classes.textField,\n              onChange: this.handleChange,\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"contained\",\n              color: \"primary\",\n              className: classes.submitButton,\n              disabled: loading,\n              children: [\"Submit\", loading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 20,\n                className: classes.progressSpinner\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nPostPlant.propTypes = {\n  postPlant: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  UI: state.UI\n});\n\nexport default connect(mapStateToProps, {\n  postPlant\n})(withStyles(styles)(PostPlant));","map":{"version":3,"sources":["/Volumes/extra/is295/plantrs-ph-app/src/components/PostPlant.js"],"names":["React","Component","Fragment","PropTypes","withStyles","MyButton","connect","postPlant","Button","TextField","Dialog","DialogActions","DialogContent","DialogTitle","CircularProgress","AddIcon","CloseIcon","styles","theme","spreadThis","submitButton","position","progressSpinner","closeButton","left","top","PostPlant","state","open","plantName","phylum","klass","urder","family","genus","species","caption","errors","handleOpen","setState","handleClose","handleChange","event","target","name","value","handleSubmit","preventDefault","props","render","classes","UI","loading","textField","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../util/MyButton';\n\n// Redux stuff\nimport { connect } from 'react-redux';\nimport { postPlant } from '../redux/actions/dataActions';\n\n// MUI stuff\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// Icons\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst styles = (theme) => ({\n    ...theme.spreadThis,\n    submitButton:{\n        position: 'relative'\n    },\n    progressSpinner:{\n        position: 'absolute'\n    },\n    closeButton:{\n        position: 'absolute',\n        left: '90%',\n        top: '2%'\n    }\n})\n\nclass PostPlant extends Component{\n    state = {\n        open: false,\n        plantName: '',\n        phylum: '',\n        klass: '',\n        urder: '',\n        family: '',\n        genus: '',\n        species: '',\n        caption: '',\n        errors: {}\n    };\n    handleOpen = () => {\n        this.setState({ open: true })\n    };\n    handleClose = () => {\n        this.setState({ open: false })\n    };\n    handleChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value})\n    };\n    handleSubmit =(event) => {\n        event.preventDefault();\n        this.props.postPlant({ plantName: this.state.plantName });\n        this.props.postPlant({ caption: this.state.caption });\n    }\n    render(){\n        const { errors } = this.state;\n        const { classes, UI: { loading }} = this.props;\n        return (\n            <Fragment>\n                <MyButton onClick={this.handleOpen} tip=\"Post a Plant!\">\n                    <AddIcon/>\n                </MyButton>\n                <Dialog open={this.state.open} onClose={this.handleClose} fullWidth maxWidth=\"sm\">\n                    <MyButton tip=\"Close\" onClick={this.handleClose} tipClassName={classes.closeButton}>\n                        <CloseIcon/>\n                    </MyButton>\n                    <DialogTitle>Post a new plant</DialogTitle>\n                    <DialogContent>\n                        <form onSubmit={this.handleSubmit}>\n                            <TextField\n                                name=\"plantName\"\n                                type=\"text\"\n                                label=\"PLANT\"\n                                placeholder=\"Name of your plant\"\n                                error={errors.plantName ? true : false}\n                                helperText={errors.plantName}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            <TextField\n                                name=\"caption\"\n                                type=\"text\"\n                                label=\"DESCRIPTION\"\n                                multiline\n                                rows=\"3\"\n                                placeholder=\"Describe your plant\"\n                                error={errors.caption ? true : false}\n                                helperText={errors.caption}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                                <Button type=\"submit\" variant=\"contained\" color=\"primary\"\n                                    className={classes.submitButton} disabled={loading}>\n                                        Submit\n                                        {loading && (\n                                            <CircularProgress size={20} className={classes.progressSpinner}/>\n                                        )}\n                                    </Button>\n                        </form>\n                    </DialogContent>\n                </Dialog>\n            </Fragment>\n        )\n    }\n}\n\nPostPlant.propTypes = {\n    postPlant: PropTypes.func.isRequired,\n    UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    UI: state.UI\n})\n\nexport default connect(\n    mapStateToProps, \n    { postPlant }\n)(withStyles(styles)(PostPlant));"]},"metadata":{},"sourceType":"module"}