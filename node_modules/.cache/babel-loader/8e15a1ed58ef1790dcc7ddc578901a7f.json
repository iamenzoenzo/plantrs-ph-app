{"ast":null,"code":"import _toConsumableArray from \"/Volumes/extra/is295/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Volumes/extra/is295/plantrs-ph-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { SET_PLANTS, LIKE_PLANT, UNLIKE_PLANT, LOADING_DATA, DELETE_PLANT, POST_PLANT } from '../types';\nvar initialState = {\n  plants: [],\n  plant: {},\n  loading: false\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOADING_DATA:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case SET_PLANTS:\n      return _objectSpread({}, state, {\n        plants: action.payload,\n        loading: false\n      });\n\n    case LIKE_PLANT:\n    case UNLIKE_PLANT:\n      var index = state.plants.findIndex(function (plant) {\n        return plant.plantId === action.payload.plantId;\n      });\n      state.plants[index] = action.payload;\n      return _objectSpread({}, state);\n\n    case DELETE_PLANT:\n      index = state.plants.findIndex(function (plant) {\n        return plant.plantId === action.payload;\n      });\n      state.plants.splice(index, 1);\n      return _objectSpread({}, state);\n\n    case POST_PLANT:\n      return _objectSpread({}, state, {\n        plants: [action.payload].concat(_toConsumableArray(state.plants))\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Volumes/extra/is295/plantrs-ph-app/src/redux/reducers/dataReducer.js"],"names":["SET_PLANTS","LIKE_PLANT","UNLIKE_PLANT","LOADING_DATA","DELETE_PLANT","POST_PLANT","initialState","plants","plant","loading","state","action","type","payload","index","findIndex","plantId","splice"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,UAArB,EAAiCC,YAAjC,EAA+CC,YAA/C,EAA6DC,YAA7D,EAA2EC,UAA3E,QAA6F,UAA7F;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,OAAO,EAAE;AAHQ,CAArB;AAMA,eAAe,YAAsC;AAAA,MAA7BC,KAA6B,uEAArBJ,YAAqB;AAAA,MAAPK,MAAO;;AACjD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,YAAL;AACI,+BACOO,KADP;AAEID,QAAAA,OAAO,EAAE;AAFb;;AAIJ,SAAKT,UAAL;AACI,+BACOU,KADP;AAEIH,QAAAA,MAAM,EAAEI,MAAM,CAACE,OAFnB;AAGIJ,QAAAA,OAAO,EAAE;AAHb;;AAKJ,SAAKR,UAAL;AACA,SAAKC,YAAL;AACI,UAAIY,KAAK,GAAGJ,KAAK,CAACH,MAAN,CAAaQ,SAAb,CAAuB,UAACP,KAAD;AAAA,eAAWA,KAAK,CAACQ,OAAN,KAAkBL,MAAM,CAACE,OAAP,CAAeG,OAA5C;AAAA,OAAvB,CAAZ;AACAN,MAAAA,KAAK,CAACH,MAAN,CAAaO,KAAb,IAAsBH,MAAM,CAACE,OAA7B;AACA,+BACOH,KADP;;AAGJ,SAAKN,YAAL;AACIU,MAAAA,KAAK,GAAGJ,KAAK,CAACH,MAAN,CAAaQ,SAAb,CAAuB,UAACP,KAAD;AAAA,eAAWA,KAAK,CAACQ,OAAN,KAAkBL,MAAM,CAACE,OAApC;AAAA,OAAvB,CAAR;AACAH,MAAAA,KAAK,CAACH,MAAN,CAAaU,MAAb,CAAoBH,KAApB,EAA2B,CAA3B;AACA,+BACOJ,KADP;;AAGJ,SAAKL,UAAL;AACI,+BACOK,KADP;AAEIH,QAAAA,MAAM,GACFI,MAAM,CAACE,OADL,4BAECH,KAAK,CAACH,MAFP;AAFV;;AAOJ;AACI,aAAOG,KAAP;AAlCR;AAoCH","sourcesContent":["import { SET_PLANTS, LIKE_PLANT, UNLIKE_PLANT, LOADING_DATA, DELETE_PLANT, POST_PLANT } from '../types';\n\nconst initialState = {\n    plants: [],\n    plant: {},\n    loading: false\n};\n\nexport default function(state = initialState, action){\n    switch(action.type){\n        case LOADING_DATA:\n            return {\n                ...state,\n                loading: true\n            };\n        case SET_PLANTS:\n            return {\n                ...state,\n                plants: action.payload,\n                loading: false\n            };\n        case LIKE_PLANT:\n        case UNLIKE_PLANT:\n            let index = state.plants.findIndex((plant) => plant.plantId === action.payload.plantId);\n            state.plants[index] = action.payload;\n            return {\n                ...state\n            };\n        case DELETE_PLANT:\n            index = state.plants.findIndex((plant) => plant.plantId === action.payload);\n            state.plants.splice(index, 1);\n            return {\n                ...state\n            };\n        case POST_PLANT:\n            return {\n                ...state,\n                plants: [\n                    action.payload,\n                    ...state.plants\n                ]\n            }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}