{"ast":null,"code":"var _jsxFileName = \"/Volumes/External/MasterGithub/plantrs-ph-app/src/components/plant/PostPlant.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../../util/MyButton'; // MUI stuff\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress'; // Redux stuff\n\nimport { connect } from 'react-redux';\nimport { postPlant, clearErrors } from '../../redux/actions/dataActions'; // Icons\n\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst styles = theme => ({ ...theme.spreadThis,\n  submitButton: {\n    position: 'relative',\n    float: 'right',\n    marginTop: 10\n  },\n  progressSpinner: {\n    position: 'absolute'\n  },\n  closeButton: {\n    position: 'absolute',\n    left: '88%',\n    top: '0%'\n  }\n});\n\nclass PostPlant extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false,\n      plantName: '',\n      phylum: '',\n      klass: '',\n      urder: '',\n      family: '',\n      genus: '',\n      species: '',\n      caption: '',\n      errors: {}\n    };\n\n    this.handleOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.props.clearErrors();\n      this.setState({\n        open: false,\n        errors: {}\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = () => {\n      const plantDetails = {\n        plantName: this.state.plantName,\n        phylum: this.state.phylum,\n        klass: this.state.klass,\n        urder: this.state.urder,\n        family: this.state.family,\n        genus: this.state.genus,\n        species: this.state.species,\n        plantImg: 'https://firebasestorage.googleapis.com/v0/b/plantrs-ph.appspot.com/o/no-plant-img.png?alt=media',\n        caption: this.state.caption\n      };\n      this.props.postPlant(plantDetails);\n      this.handleClose();\n    };\n  }\n\n  /* static getDerivedStateFromProps(props) {\n      if (props.UI.errors) {\n        return {\n          errors: props.UI.errors\n        }\n      }\n      return null;\n  }; */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.UI.errors) {\n      this.setState({\n        errors: nextProps.UI.errors\n      });\n    }\n\n    if (!nextProps.UI.errors && !nextProps.UI.loading) {\n      this.setState({\n        plantName: '',\n        open: false,\n        errors: {}\n      });\n      this.setState({\n        caption: '',\n        open: false,\n        errors: {}\n      });\n    }\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    const {\n      classes,\n      UI: {\n        loading\n      }\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MyButton, {\n      onClick: this.handleOpen,\n      tip: \"Post a Plant!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(AddIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      fullWidth: true,\n      maxWidth: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(MyButton, {\n      tip: \"Close\",\n      onClick: this.handleClose,\n      tipClassName: classes.closeButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CloseIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(DialogTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, \"Post a new plant\"), /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      name: \"plantName\",\n      type: \"text\",\n      label: \"PLANT\",\n      placeholder: \"Name of your plant\",\n      error: errors.plantName ? true : false,\n      helperText: errors.plantName,\n      className: classes.textField,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      name: \"phylum\",\n      type: \"text\",\n      label: \"PHYLUM\",\n      placeholder: \"Name of your plant\",\n      error: errors.phylum ? true : false,\n      helperText: errors.phylum,\n      className: classes.textField,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      name: \"klass\",\n      type: \"text\",\n      label: \"CLASS\",\n      placeholder: \"Name of your plant\",\n      error: errors.klass ? true : false,\n      helperText: errors.klass,\n      className: classes.textField,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      name: \"urder\",\n      type: \"text\",\n      label: \"ORDER\",\n      placeholder: \"Name of your plant\",\n      error: errors.urder ? true : false,\n      helperText: errors.urder,\n      className: classes.textField,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      name: \"family\",\n      type: \"text\",\n      label: \"FAMILY\",\n      placeholder: \"Name of your plant\",\n      error: errors.family ? true : false,\n      helperText: errors.family,\n      className: classes.textField,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      name: \"genus\",\n      type: \"text\",\n      label: \"GENUS\",\n      placeholder: \"Name of your plant\",\n      error: errors.genus ? true : false,\n      helperText: errors.genus,\n      className: classes.textField,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      name: \"species\",\n      type: \"text\",\n      label: \"SPECIES\",\n      placeholder: \"Name of your plant\",\n      error: errors.species ? true : false,\n      helperText: errors.species,\n      className: classes.textField,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      name: \"caption\",\n      type: \"text\",\n      label: \"DESCRIPTION\",\n      multiline: true,\n      rows: \"3\",\n      placeholder: \"Describe your plant\",\n      error: errors.caption ? true : false,\n      helperText: errors.caption,\n      className: classes.textField,\n      onChange: this.handleChange,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleSubmit,\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.submitButton,\n      disabled: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 33\n      }\n    }, \"Submit\", loading && /*#__PURE__*/React.createElement(CircularProgress, {\n      size: 20,\n      className: classes.progressSpinner,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 45\n      }\n    }))))));\n  }\n\n}\n\nPostPlant.propTypes = {\n  postPlant: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  UI: state.UI\n});\n\nexport default connect(mapStateToProps, {\n  postPlant,\n  clearErrors\n})(withStyles(styles)(PostPlant));","map":{"version":3,"sources":["/Volumes/External/MasterGithub/plantrs-ph-app/src/components/plant/PostPlant.js"],"names":["React","Component","Fragment","PropTypes","withStyles","MyButton","Button","TextField","Dialog","DialogContent","DialogTitle","CircularProgress","connect","postPlant","clearErrors","AddIcon","CloseIcon","styles","theme","spreadThis","submitButton","position","float","marginTop","progressSpinner","closeButton","left","top","PostPlant","state","open","plantName","phylum","klass","urder","family","genus","species","caption","errors","handleOpen","setState","handleClose","props","handleChange","event","target","name","value","handleSubmit","plantDetails","plantImg","componentWillReceiveProps","nextProps","UI","loading","render","classes","textField","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../../util/MyButton';\n\n// MUI stuff\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n// Redux stuff\nimport { connect } from 'react-redux';\nimport { postPlant, clearErrors } from '../../redux/actions/dataActions';\n\n// Icons\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst styles = (theme) => ({\n    ...theme.spreadThis,\n    submitButton:{\n        position: 'relative',\n        float: 'right',\n        marginTop: 10\n    },\n    progressSpinner:{\n        position: 'absolute'\n    },\n    closeButton:{\n        position: 'absolute',\n        left: '88%',\n        top: '0%'\n    }\n})\n\nclass PostPlant extends Component{\n    state = {\n        open: false,\n        plantName: '',\n        phylum: '',\n        klass: '',\n        urder: '',\n        family: '',\n        genus: '',\n        species: '',\n        caption: '',\n        errors: {}\n    };\n    /* static getDerivedStateFromProps(props) {\n        if (props.UI.errors) {\n          return {\n            errors: props.UI.errors\n          }\n        }\n        return null;\n    }; */\n    componentWillReceiveProps(nextProps){\n        if(nextProps.UI.errors){\n            this.setState({\n                errors: nextProps.UI.errors\n            });\n        }\n        if (!nextProps.UI.errors && !nextProps.UI.loading) {\n            this.setState({ plantName: '', open: false, errors: {} });\n            this.setState({ caption: '', open: false, errors: {} });\n        }\n    }\n    handleOpen = () => {\n        this.setState({ open: true })\n    };\n    handleClose = () => {\n        this.props.clearErrors();\n        this.setState({ open: false, errors: {} });\n    };\n    handleChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value})\n    };\n    /* handleSubmit =(event) => {\n        event.preventDefault();\n        this.props.postPlant({ plantName: this.state.plantName });\n\n    }; */\n    handleSubmit = () => {\n        const plantDetails = {\n            plantName: this.state.plantName,\n            phylum: this.state.phylum,\n            klass: this.state.klass,\n            urder: this.state.urder,\n            family: this.state.family,\n            genus: this.state.genus,\n            species: this.state.species,\n            plantImg: 'https://firebasestorage.googleapis.com/v0/b/plantrs-ph.appspot.com/o/no-plant-img.png?alt=media',\n            caption: this.state.caption\n        };\n        this.props.postPlant(plantDetails);\n        this.handleClose();\n    };\n    render(){\n        const { errors } = this.state;\n        const { classes, UI: { loading }} = this.props;\n        return (\n            <Fragment>\n                <MyButton onClick={this.handleOpen} tip=\"Post a Plant!\">\n                    <AddIcon/>\n                </MyButton>\n                <Dialog open={this.state.open} onClose={this.handleClose} fullWidth maxWidth=\"sm\">\n                    <MyButton tip=\"Close\" onClick={this.handleClose} tipClassName={classes.closeButton}>\n                        <CloseIcon/>\n                    </MyButton>\n                    <DialogTitle>Post a new plant</DialogTitle>\n                    <DialogContent>\n                        <form onSubmit={this.handleSubmit}>\n                            <TextField\n                                name=\"plantName\"\n                                type=\"text\"\n                                label=\"PLANT\"\n                                placeholder=\"Name of your plant\"\n                                error={errors.plantName ? true : false}\n                                helperText={errors.plantName}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            <TextField\n                                name=\"phylum\"\n                                type=\"text\"\n                                label=\"PHYLUM\"\n                                placeholder=\"Name of your plant\"\n                                error={errors.phylum ? true : false}\n                                helperText={errors.phylum}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            <TextField\n                                name=\"klass\"\n                                type=\"text\"\n                                label=\"CLASS\"\n                                placeholder=\"Name of your plant\"\n                                error={errors.klass ? true : false}\n                                helperText={errors.klass}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            <TextField\n                                name=\"urder\"\n                                type=\"text\"\n                                label=\"ORDER\"\n                                placeholder=\"Name of your plant\"\n                                error={errors.urder ? true : false}\n                                helperText={errors.urder}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            <TextField\n                                name=\"family\"\n                                type=\"text\"\n                                label=\"FAMILY\"\n                                placeholder=\"Name of your plant\"\n                                error={errors.family ? true : false}\n                                helperText={errors.family}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            <TextField\n                                name=\"genus\"\n                                type=\"text\"\n                                label=\"GENUS\"\n                                placeholder=\"Name of your plant\"\n                                error={errors.genus ? true : false}\n                                helperText={errors.genus}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            <TextField\n                                name=\"species\"\n                                type=\"text\"\n                                label=\"SPECIES\"\n                                placeholder=\"Name of your plant\"\n                                error={errors.species ? true : false}\n                                helperText={errors.species}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                            \n                            <TextField\n                                name=\"caption\"\n                                type=\"text\"\n                                label=\"DESCRIPTION\"\n                                multiline\n                                rows=\"3\"\n                                placeholder=\"Describe your plant\"\n                                error={errors.caption ? true : false}\n                                helperText={errors.caption}\n                                className={classes.textField}\n                                onChange={this.handleChange}\n                                fullWidth\n                                />\n                                <Button onClick={this.handleSubmit}  type=\"submit\" variant=\"contained\" color=\"primary\"\n                                    className={classes.submitButton} disabled={loading}>\n                                        Submit\n                                        {loading && (\n                                            <CircularProgress size={20} className={classes.progressSpinner}/>\n                                        )}\n                                    </Button>\n                        </form>\n                    </DialogContent>\n                </Dialog>\n            </Fragment>\n        )\n    }\n}\n\nPostPlant.propTypes = {\n    postPlant: PropTypes.func.isRequired,\n    clearErrors: PropTypes.func.isRequired,\n    UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    UI: state.UI\n})\n\nexport default connect(\n    mapStateToProps, \n    { postPlant, clearErrors }\n)(withStyles(styles)(PostPlant));"]},"metadata":{},"sourceType":"module"}